{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/jsimple/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/jsimple/source/CNAME","path":"CNAME","modified":0,"renderable":1},{"_id":"themes/jsimple/source/warn.html","path":"warn.html","modified":0,"renderable":1},{"_id":"themes/jsimple/source/images/404-bg.jpg","path":"images/404-bg.jpg","modified":0,"renderable":1},{"_id":"themes/jsimple/source/images/JSimple-Snapshot-Macbook Pro15.png","path":"images/JSimple-Snapshot-Macbook Pro15.png","modified":0,"renderable":1},{"_id":"themes/jsimple/source/images/cover-day.jpg","path":"images/cover-day.jpg","modified":0,"renderable":1},{"_id":"themes/jsimple/source/images/donate-qr.png","path":"images/donate-qr.png","modified":0,"renderable":1},{"_id":"themes/jsimple/source/images/cover-night.jpg","path":"images/cover-night.jpg","modified":0,"renderable":1},{"_id":"themes/jsimple/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/jsimple/source/images/rssFeed-bg.jpg","path":"images/rssFeed-bg.jpg","modified":0,"renderable":1},{"_id":"themes/jsimple/source/images/tags-bg.png","path":"images/tags-bg.png","modified":0,"renderable":1},{"_id":"themes/jsimple/source/css/JSimple.css","path":"css/JSimple.css","modified":0,"renderable":1},{"_id":"themes/jsimple/source/js/SimpleCore.js","path":"js/SimpleCore.js","modified":0,"renderable":1},{"_id":"themes/jsimple/source/js/busuanzi.pure.mini.js","path":"js/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/jsimple/source/js/md5.min.js","path":"js/md5.min.js","modified":0,"renderable":1},{"_id":"themes/jsimple/source/js/zepto.min.js","path":"js/zepto.min.js","modified":0,"renderable":1},{"_id":"themes/jsimple/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/jsimple/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/jsimple/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/jsimple/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/jsimple/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/jsimple/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/jsimple/source/images/sns-qrcode.jpg","path":"images/sns-qrcode.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"0f74a146777d0bab750f0f73f44ce56bfef394a2","modified":1596328681702},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1596325508344},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1596325508344},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1596325508344},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1596325508345},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1596325508345},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1596325508352},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1596325508345},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1596325508345},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1596325508345},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1596325508346},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1596325508346},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1596325508346},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1596325508346},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1596325508346},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1596325508346},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1596325508346},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1596325508347},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1596325508347},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1596325508351},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1596325508351},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1596325508351},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1596325508351},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1596325508351},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1596325508352},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1596325508352},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1596325508352},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1596325508347},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1596325508347},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1596325508347},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1596325508348},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1596325508348},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1596325508348},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1596325508348},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1596325508348},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1596325508348},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1596325508349},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1596325508350},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1596325508350},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1596325508350},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1596325508350},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1596325508350},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1596325508351},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1596325508352},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1596325508355},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1596325508360},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1596325508361},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1596325508361},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1596325508361},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1596325508361},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1596325508361},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1596325508362},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1596325508363},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1596325508363},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1596325508364},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1596325508365},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1596325508349},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1596325508349},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1596325508349},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1596325508349},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1596325508349},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1596325508350},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1596325508353},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1596325508353},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1596325508353},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1596325508353},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1596325508353},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1596325508354},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1596325508354},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1596325508354},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1596325508354},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1596325508354},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1596325508354},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1596325508355},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1596325508356},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1596325508356},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1596325508358},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1596325508362},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1596325508362},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1596325508362},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1596325508362},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1596325508363},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1596325508363},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1596325508358},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1596325508357},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1596325508360},{"_id":"themes/jsimple/.gitignore","hash":"8a27dbc2899378d9b63a768d2b15be8e1b65887d","modified":1596325622359},{"_id":"themes/jsimple/.travis.yml","hash":"f5b0dc147b6823631adde683d517fa63845f9738","modified":1596325622359},{"_id":"themes/jsimple/CHANGELOG.md","hash":"a06abad167b43129cbedc216c04e376d454df0ce","modified":1596325622359},{"_id":"themes/jsimple/LICENSE","hash":"e84291eaaeb4a02004d4aa6a504cbf9475f5c562","modified":1596325622360},{"_id":"themes/jsimple/README.md","hash":"1c9bf075fcdb214bddee747b80a3acd6b4b2e898","modified":1596325622360},{"_id":"themes/jsimple/README.zhCN.md","hash":"ce5e01746dbf162fac869b6a6ba22b5c329316ac","modified":1596325622360},{"_id":"themes/jsimple/_config.yml","hash":"23aac868e1405f400ebdb560fa96dab183614a2f","modified":1596328647698},{"_id":"themes/jsimple/package.json","hash":"9e498c7b5ca83ad6784ba723bec8892c8c7c4057","modified":1596325622367},{"_id":"themes/jsimple/layout/archive.ejs","hash":"6c1f3a8f9cf2867a72d7328e7845ebe96fb7d326","modified":1596325622366},{"_id":"themes/jsimple/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1596325622366},{"_id":"themes/jsimple/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1596325622366},{"_id":"themes/jsimple/layout/page.ejs","hash":"4a2ddc7c5868279d368a527a340a7d7fddeb975c","modified":1596325622366},{"_id":"themes/jsimple/layout/layout.ejs","hash":"f247923305ec5a35ea6ddd530cc959ba6bb5eaf4","modified":1596333436652},{"_id":"themes/jsimple/layout/post.ejs","hash":"32457bc480205dd9be7c3bebbd9b04beb2a60992","modified":1596325622367},{"_id":"themes/jsimple/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1596325622367},{"_id":"themes/jsimple/layout/tags.ejs","hash":"4d63f824dc4c29e1d6c19f3c319d0b49b569ee6b","modified":1596325622367},{"_id":"themes/jsimple/languages/en.yml","hash":"47caec91011155921dd9febbe48ccb6a6d1b5243","modified":1596325622361},{"_id":"themes/jsimple/languages/zh-cn.yml","hash":"69f1491d9cacaa400c29741993cad100a4c8eae8","modified":1596325622361},{"_id":"themes/jsimple/patch/README.md","hash":"576744a5e99dd4079a20fd049ef95663baf8181c","modified":1596325622368},{"_id":"themes/jsimple/patch/run.sh","hash":"571c0a9ff4d6dbdfcdb2157ad5d8646a081408b6","modified":1596325622368},{"_id":"themes/jsimple/source/404.html","hash":"475709d03129791e0935d73af7cac9ca1caa2bbc","modified":1596325622369},{"_id":"themes/jsimple/source/CNAME","hash":"e3c58d55afd613387b3d18e66cba0e5c350125f5","modified":1596325622370},{"_id":"themes/jsimple/source/warn.html","hash":"0759567e21411a5335e2fac54ef9be6f9df1cf85","modified":1596325622392},{"_id":"themes/jsimple/layout/_partial/_page.ejs","hash":"7ae873c06335553229ecdf13911d19635aba62d4","modified":1596325622362},{"_id":"themes/jsimple/layout/_partial/_post.ejs","hash":"c4247fd509b3c197566a42eb71d1daa5d020423e","modified":1596333562456},{"_id":"themes/jsimple/layout/_partial/archive.ejs","hash":"76804ce3d415706c60b77fb0b541bc2f6d403d04","modified":1596328480058},{"_id":"themes/jsimple/layout/_partial/comments.ejs","hash":"041e741c9e2c34ecb2f5b31a4c88df59ca961677","modified":1596325622362},{"_id":"themes/jsimple/layout/_partial/footer.ejs","hash":"6635d5095e251689adfc285d4c2f32cf4009c041","modified":1596325622363},{"_id":"themes/jsimple/layout/_partial/head.ejs","hash":"eb1b36a5a5047c6c895dfe339327a2266595dc02","modified":1596325622363},{"_id":"themes/jsimple/layout/_partial/leftMenu.ejs","hash":"5f211389a69d0d01120b06a9caa30439039c114d","modified":1596325622363},{"_id":"themes/jsimple/layout/_partial/middleCover.ejs","hash":"06ec965085593964446b9f0bd25f20dea562a56b","modified":1596325622363},{"_id":"themes/jsimple/layout/_widget/analytics.ejs","hash":"e29fd2a2573d6c2ea35a0ebc5ac81847530f56b4","modified":1596325622364},{"_id":"themes/jsimple/layout/_widget/category-items.ejs","hash":"55969635b1d043a47505d0cd9b92b82d05d80962","modified":1596325622364},{"_id":"themes/jsimple/layout/_widget/common-article.ejs","hash":"09548fcfd43254f45ccbaa48c658fb1300c9cc4d","modified":1596332619374},{"_id":"themes/jsimple/layout/_widget/search-bar.ejs","hash":"2c9370f84c42f3c664773917136fe589a8321352","modified":1596325622365},{"_id":"themes/jsimple/layout/_widget/sns-entry.ejs","hash":"af209bc22ba5bf787c12edef3e3465af0a1a85cc","modified":1596325622365},{"_id":"themes/jsimple/layout/_widget/user-entry.ejs","hash":"406ab33bb6dfee9536c2fc8ef9d6d5eba733e637","modified":1596325622365},{"_id":"themes/jsimple/patch/scripts/generator.js","hash":"ce856fa06cc02482a4a2b4f4c3d7ebe7e650c0c5","modified":1596325622368},{"_id":"themes/jsimple/patch/scripts/post.js","hash":"56e9ca81d0e33efe2462deec059c31a3aa44db4c","modified":1596325622369},{"_id":"themes/jsimple/patch/scripts/scaffold.js","hash":"6eb9a89c1e1de02229b49e7230cb6f483cf03c8c","modified":1596325622369},{"_id":"themes/jsimple/source/images/donate-qr.png","hash":"b61b59440fee1dd61985a901535d72b497a96b8a","modified":1596331034789},{"_id":"themes/jsimple/source/images/favicon.png","hash":"4429951b118d50bda2575d846fd9d9a88f1762f7","modified":1596325622389},{"_id":"themes/jsimple/source/images/rssFeed-bg.jpg","hash":"152d21e2a733e94c8a2c726fca8b2555b3d05979","modified":1596325622389},{"_id":"themes/jsimple/source/images/sns-qrcode.png","hash":"65afb3caede6910211e45144347ed5cfabfd047e","modified":1596325622390},{"_id":"themes/jsimple/source/css/JSimple.css","hash":"5a70ec1efbb6b2a7f429700c656eb8deba26452f","modified":1596325622370},{"_id":"themes/jsimple/source/js/SimpleCore.js","hash":"543c7e50510d550c1e3f322b1e84b451e6394ac6","modified":1596327184453},{"_id":"themes/jsimple/source/js/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1596325622391},{"_id":"themes/jsimple/source/js/md5.min.js","hash":"9f415ede3d4f9baf95db3da0df14ffea9075edbe","modified":1596325622391},{"_id":"themes/jsimple/source/js/zepto.min.js","hash":"6865443a258954fa19b8aa682e1f4c77d42493d1","modified":1596325622392},{"_id":"themes/jsimple/layout/_widget/ads/adSense-auto.ejs","hash":"ba058bc06dba7aac87ac29ee0e4d437f3e640364","modified":1596325622363},{"_id":"themes/jsimple/layout/_widget/ads/adSense.ejs","hash":"a8738c20364567e99730d0ba23c45153ed3d2e7d","modified":1596325622364},{"_id":"themes/jsimple/layout/_widget/ads/adaptive-unit.ejs","hash":"59f9f1db15d5851c449389f14116a68b67825f62","modified":1596325622364},{"_id":"themes/jsimple/source/images/404-bg.jpg","hash":"85480e340d2af57c4e4b3ae93525ed608ea343b7","modified":1596325622382},{"_id":"themes/jsimple/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1596325622381},{"_id":"themes/jsimple/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1596325622381},{"_id":"themes/jsimple/source/images/cover-night.jpg","hash":"024e16a5f6a34afa7634526e467dfa4a725e5493","modified":1596325622388},{"_id":"themes/jsimple/source/images/tags-bg.png","hash":"d26a01dabe7cbe25d653ffbf7367c4b66d910ce9","modified":1596325622390},{"_id":"themes/jsimple/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1596325622372},{"_id":"themes/jsimple/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1596325622375},{"_id":"themes/jsimple/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1596325622380},{"_id":"themes/jsimple/source/images/cover-day.jpg","hash":"129ae36334fc1ee862892f31be57da613f177be1","modified":1596333079605},{"_id":"themes/jsimple/source/images/JSimple-Snapshot-Macbook Pro15.png","hash":"75a9e94c7fcdc7ffb3724c33190a19a3115639af","modified":1596325622384},{"_id":"themes/jsimple/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1596325622378},{"_id":"public/2020/08/02/hello-world/index.html","hash":"f9962a6ecb7af60dc9cb87534813ed27869f737e","modified":1596328684341},{"_id":"public/archives/index.html","hash":"970c8c1e47af87e4bb35049132163f1a43dc4da3","modified":1596465697708},{"_id":"public/archives/2020/index.html","hash":"56ed3d0e269a3dd41ccd33cee10779a89a2c351c","modified":1596465697708},{"_id":"public/archives/2020/08/index.html","hash":"b622b675b3c29194862f0432ed58753b88e9b20d","modified":1596465697708},{"_id":"public/index.html","hash":"ce41a53a955c662020d5cb9d3faa804cc15a084e","modified":1596465697708},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1596465450443},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1596465450443},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1596465450443},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1596465450443},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1596465450443},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1596465450443},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1596465450443},{"_id":"public/CNAME","hash":"e3c58d55afd613387b3d18e66cba0e5c350125f5","modified":1596465450443},{"_id":"public/images/donate-qr.png","hash":"b61b59440fee1dd61985a901535d72b497a96b8a","modified":1596465450443},{"_id":"public/images/favicon.png","hash":"4429951b118d50bda2575d846fd9d9a88f1762f7","modified":1596465450443},{"_id":"public/images/rssFeed-bg.jpg","hash":"152d21e2a733e94c8a2c726fca8b2555b3d05979","modified":1596465450443},{"_id":"public/images/sns-qrcode.png","hash":"65afb3caede6910211e45144347ed5cfabfd047e","modified":1596325818998},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1596465450443},{"_id":"public/images/404-bg.jpg","hash":"85480e340d2af57c4e4b3ae93525ed608ea343b7","modified":1596465450443},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1596465450443},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1596465450443},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1596465450443},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1596465450443},{"_id":"public/images/cover-night.jpg","hash":"024e16a5f6a34afa7634526e467dfa4a725e5493","modified":1596465450443},{"_id":"public/images/tags-bg.png","hash":"d26a01dabe7cbe25d653ffbf7367c4b66d910ce9","modified":1596465450443},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1596465450443},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1596465450443},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1596465450443},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1596465450443},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1596465450443},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1596465450443},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1596465450443},{"_id":"public/404.html","hash":"475709d03129791e0935d73af7cac9ca1caa2bbc","modified":1596465450443},{"_id":"public/warn.html","hash":"0759567e21411a5335e2fac54ef9be6f9df1cf85","modified":1596465450443},{"_id":"public/js/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1596465450443},{"_id":"public/js/md5.min.js","hash":"9f415ede3d4f9baf95db3da0df14ffea9075edbe","modified":1596465450443},{"_id":"public/css/style.css","hash":"d4cfa90089c78a8b791252afae9fafa3b5658900","modified":1596465450443},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1596465450443},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1596465450443},{"_id":"public/js/SimpleCore.js","hash":"543c7e50510d550c1e3f322b1e84b451e6394ac6","modified":1596465450443},{"_id":"public/js/zepto.min.js","hash":"6865443a258954fa19b8aa682e1f4c77d42493d1","modified":1596465450443},{"_id":"public/images/cover-day.jpg","hash":"129ae36334fc1ee862892f31be57da613f177be1","modified":1596465450443},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1596465450443},{"_id":"public/images/JSimple-Snapshot-Macbook Pro15.png","hash":"75a9e94c7fcdc7ffb3724c33190a19a3115639af","modified":1596465450443},{"_id":"public/css/JSimple.css","hash":"5a70ec1efbb6b2a7f429700c656eb8deba26452f","modified":1596465450443},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1596465450443},{"_id":"source/categories/index.md","hash":"3e3c093f7dc35e966053da0a977debeb984f1859","modified":1596326512210},{"_id":"public/categories/index.html","hash":"ee493a1895c75f2ae56b0bf1033617947ea2a424","modified":1596465697708},{"_id":"public/categories/tech/index.html","hash":"146e99376f4d354f353b18d1e70415f1cd9c6fcb","modified":1596465697708},{"_id":"source/tags/index.md","hash":"211d950d65f3ed931283b54967e344947b1690f4","modified":1596326760656},{"_id":"public/tags/index.html","hash":"52e9f2568181ed4163d75c1fe1fe3dd67b079464","modified":1596465697708},{"_id":"source/search/index.md","hash":"636acc83ba5aa73c0a2e470db6a7274be07c5579","modified":1596326831232},{"_id":"public/search/index.html","hash":"cdd89031328fbcedfc100a66832245191e570202","modified":1596465697708},{"_id":"source/help/index.md","hash":"38f38ad520489336cb1dbb3f0fdf8f2b9e7c9032","modified":1596327980650},{"_id":"public/help/index.html","hash":"b9382a4c2a1b8c17223b02c8eec87c572b052cc9","modified":1596465697708},{"_id":"public/tags/tech/index.html","hash":"408b8f05c09a08cf4ffb197b85156ba15864be14","modified":1596328684341},{"_id":"source/_posts/PHP语言的foreach语句引用的问题.md","hash":"93aeef5d72682e11b42b314f91dfcddcdaffa995","modified":1596331531897},{"_id":"public/2020/08/02/PHP语言的foreach语句引用的问题/index.html","hash":"bc09787fe6f588c7414699f5c066dbdc0c29d985","modified":1596465697708},{"_id":"public/tags/php/index.html","hash":"74284bd9486fa22e57860e2e21e34d2dcdfce72a","modified":1596465697708},{"_id":"public/tags/foreach/index.html","hash":"d04d7270ccb3d4b06f804c11e49d896b02f8d1c6","modified":1596465697708},{"_id":"public/tags/引用/index.html","hash":"5697a34551a4f2688901809bfec577395bd51b01","modified":1596465697708},{"_id":"themes/jsimple/source/images/conver-day.jpg","hash":"129ae36334fc1ee862892f31be57da613f177be1","modified":1596333079605},{"_id":"source/_posts/MySQL碎片问题跟踪以及解决.md","hash":"37ef8321bec600beb5ef870f5e8376b69ba26e47","modified":1596335157541},{"_id":"public/2020/08/02/MySQL碎片问题跟踪以及解决/index.html","hash":"f7b32624683a36ba64299cab5732565dc1870933","modified":1596465697708},{"_id":"public/categories/mysql/index.html","hash":"f8464ba1f150583b22d345659c17466e427abd3e","modified":1596333265787},{"_id":"public/categories/mysql/碎片/index.html","hash":"def1877f26471580a83f6510eafc804a4a251bcb","modified":1596333265787},{"_id":"public/tags/mysql/index.html","hash":"a000fd25beda9eab014a6e3582b68ce913e0148d","modified":1596465697708},{"_id":"public/tags/碎片/index.html","hash":"5f754a59b419118176142c7b5ba3179a055f1c1e","modified":1596465697708},{"_id":"themes/jsimple/source/images/sns-qrcode.JPG","hash":"c4fd053709b3af38f78b3797e0f2b9933d1c3d91","modified":1596333328000},{"_id":"public/images/sns-qrcode.JPG","hash":"c4fd053709b3af38f78b3797e0f2b9933d1c3d91","modified":1596333388362},{"_id":"themes/jsimple/source/images/sns-qrcode.jpg","hash":"4a6c66d96a9e4c2eb67eae3eca20d40f84124829","modified":1596333504897},{"_id":"public/images/sns-qrcode.jpg","hash":"4a6c66d96a9e4c2eb67eae3eca20d40f84124829","modified":1596465697708},{"_id":"themes/jsimple/source/.DS_Store","hash":"495dc0d217dbc3e7cb0c015a4aa9af3e7011d37f","modified":1596333466854},{"_id":"source/_posts/性能分析的原因和手段.md","hash":"66fd58b7f4cdec98283dbb60748cc1b92ac2e47e","modified":1596336623980},{"_id":"public/tags/性能分析/index.html","hash":"143e9f901c1b5c351b18d6d3deb52a430d79364b","modified":1596465697708},{"_id":"public/tags/vmstat/index.html","hash":"57941582651f6d2e7dcfc404430fc7531fd9a859","modified":1596465697708},{"_id":"public/tags/iotop/index.html","hash":"a5d4ea85a9177f8f0d7ab28f3100c5ea314f5643","modified":1596465697708},{"_id":"public/tags/top/index.html","hash":"7f9cdd01e24ba2a83eb4df52b2f8340cb7da6d50","modified":1596465697708},{"_id":"public/tags/free/index.html","hash":"4c58bc14159831299882256f6fcd76bc3fb83e80","modified":1596465697708},{"_id":"public/tags/strace/index.html","hash":"5a2309209054e75bf245786ee88f6ced42f1f736","modified":1596465697708},{"_id":"public/2020/08/02/性能分析的原因和手段/index.html","hash":"08ff31d0878750b9e971d4ae8ec2600a69f8aefb","modified":1596465697708},{"_id":"source/_posts/WEB安全问题.md","hash":"a09b762789069705bb68580c8137df1a8441f945","modified":1596349372424},{"_id":"public/tags/WEB/index.html","hash":"cb0eee5a7041cd2b702a7ccd669b8cb0aca40a2f","modified":1596465697708},{"_id":"public/tags/SQL注入/index.html","hash":"5a733cb51834b832745ccd604dc4fc9069aba33e","modified":1596465697708},{"_id":"public/tags/XSS/index.html","hash":"7f751cc35610bcb69bde5a4b61fc9e38cf7bfe51","modified":1596465697708},{"_id":"public/tags/CSRF/index.html","hash":"f637c51ec4dbb55f9cd8328095b519206eb1fcab","modified":1596465697708},{"_id":"public/tags/XEE/index.html","hash":"85b1a22590b7306e423736fbeb0f60db4c594f0d","modified":1596465697708},{"_id":"public/tags/LFI/index.html","hash":"8793733c171cd9f3d162575edd55642c6c0188ec","modified":1596465697708},{"_id":"public/2020/08/02/WEB安全问题/index.html","hash":"1188f94ac7c55e358031863b2e381b7e9a76f8d5","modified":1596465697708},{"_id":"source/_posts/研究Canal同步MySQL.md","hash":"2df12bc09e1d1c7428d91c9207f9206338508c6f","modified":1596371798308},{"_id":"themes/jsimple/.travis 2.yml","hash":"f5b0dc147b6823631adde683d517fa63845f9738","modified":1596325622000},{"_id":"themes/jsimple/package 2.json","hash":"9e498c7b5ca83ad6784ba723bec8892c8c7c4057","modified":1596325622000},{"_id":"public/2020/08/02/研究Canal同步MySQL/index.html","hash":"9fbd017849d515c74247f09b5aaf1deb066a9c5c","modified":1596465697708},{"_id":"public/tags/canal/index.html","hash":"e942df323960ab2c740a9d4657a34defe8744dc0","modified":1596465697708},{"_id":"public/tags/binlog/index.html","hash":"0d4baa3d63fc6e174832ac04bd7a1dac44196181","modified":1596465697708},{"_id":"public/tags/同步中间件/index.html","hash":"34aa8fdde69a0625c1bdf877e1144db165659d4e","modified":1596465697708}],"Category":[{"name":"tech","_id":"ckdcbm2l6000119do7wxwa32d"},{"name":"mysql","_id":"ckdcfltoj0001pndo2xsu1p2e"},{"name":"碎片","parent":"ckdcfltoj0001pndo2xsu1p2e","_id":"ckdcfltol0004pndo3679aneu"}],"Data":[],"Page":[{"title":"categories","categories":["tech"],"date":"2020-08-02T00:01:52.000Z","tags":null,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ncategories:\n  - tech\ndate: 2020-08-02 08:01:52\ntags:\n---\n","updated":"2020-08-02T00:01:52.210Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckdcbm2l0000019do53a6g8mx","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2020-08-02T00:05:07.000Z","tags":null,"categories":null,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-08-02 08:05:07\ntags: \ncategories: \n---\n","updated":"2020-08-02T00:06:00.656Z","path":"tags/index.html","_id":"ckdcbpy8t0000l9dod6tzcft6","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"search","date":"2020-08-02T00:07:11.000Z","tags":null,"categories":null,"_content":"","source":"search/index.md","raw":"---\ntitle: search\ndate: 2020-08-02 08:07:11\ntags:\ncategories:\n---\n","updated":"2020-08-02T00:07:11.232Z","path":"search/index.html","comments":1,"layout":"page","_id":"ckdcbs6w00000vndo354weylj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"help","date":"2020-08-02T00:26:20.000Z","tags":null,"categories":null,"_content":"","source":"help/index.md","raw":"---\ntitle: help\ndate: 2020-08-02 08:26:20\ntags:\ncategories:\n---\n","updated":"2020-08-02T00:26:20.650Z","path":"help/index.html","comments":1,"layout":"page","_id":"ckdcck1wp0000fgdo2rcih65c","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"PHP语言的foreach语句引用的问题","date":"2020-08-02T00:39:48.000Z","description":"PHP编码问题","_content":"\n### 问题\n请看如下代码：\n\n```php\n<?php\n\n$arr = [ 'a', 'b', 'c', 'd' ];\n\nforeach($arr as &$v) {\n    echo $v . \" \";\n}\n\nforeach($arr as $v) {\n    echo $v . \" \";\n}\n\n```\n\n执行命令获取得到的输出:\n\n```bash\na b c d \na b c c\n```\n\n### 后果\n如果大家在 `foreach` 循环中滥用引用但是没有进行 `用完后的销毁操作` ，或许会导致后面的数据发生错误和混乱，代码难以调试\n所以建议大家采用如下的解决方案：\n\n```php\n<?php\n$arr = [ 'a', 'b', 'c', 'd' ];\n\nforeach($arr as &$v) {\n    echo $v . \" \";\n}\n\nunset($v);\n\nforeach($arr as $v) {\n    echo $v . \" \";\n}\n```\n\n或者不使用引用：\n\n```php\n<?php\n$arr = [ 'a', 'b', 'c', 'd' ];\n\nforeach($arr as $v) {\n    echo $v . \" \";\n}\n\nforeach($arr as $v) {\n    echo $v . \" \";\n}\n```\n\n为了避免使用引用出问题或者后续的冗余代码，可以使用包裹函数：\n\n```php\n<?php\n\nfunction loopArrayReference(array $input = null, Closure $callback = null )\n{\n    foreach($input as $index => &$val) {\n        $callback($input, $index, $val);\n    }\n    unset($val);\n}\n\n```\n\n\n### 解析\n这里为什么会发生这种情况，第二个 `foreach` 循环的时候，为什么拿不到最后的一个值？ 原因如下：\nPHP处理引用的时候，会在全局范围定义一个变量( 假设变量为 $t )后续的引用都是操作这个变量，因此我们就知道了，当第一次循环结束的时候，此时\n`$t` 的值保存的是 `$arr` 的最后一个值 `'d'`， 此时 `$t` 是引用，相当于 `C语言` 里面的 `指针`\n当进行到第二次循环处理的时候:\n\n处理第一个元素的时候\n```php\n$t = 'a'\n```\n\n处理第二个元素的时候\n```php\n$t = 'b'\n```\n\n处理第三个元素的时候\n```php\n$t = 'c'\n```\n\n处理第四个元素的时候,此时保存的是前一个元素的值，也就是第三个元素的值\n```php\n$t = 'c'\n```\n\n所以得到输出:\n```bash\na b c d\na b c c\n```\n\n### 后记\n如果一定要使用引用，一定要记得进行使用后的销毁操作,这个也是很多只会PHP业务层代码的程序员容易忘记的事情。\n\n\n","source":"_posts/PHP语言的foreach语句引用的问题.md","raw":"---\ntitle: PHP语言的foreach语句引用的问题\ndate: 2020-08-02 08:39:48\ntags:\n- php\n- foreach\n- 引用\ncategories:\n- tech\ndescription: PHP编码问题\n---\n\n### 问题\n请看如下代码：\n\n```php\n<?php\n\n$arr = [ 'a', 'b', 'c', 'd' ];\n\nforeach($arr as &$v) {\n    echo $v . \" \";\n}\n\nforeach($arr as $v) {\n    echo $v . \" \";\n}\n\n```\n\n执行命令获取得到的输出:\n\n```bash\na b c d \na b c c\n```\n\n### 后果\n如果大家在 `foreach` 循环中滥用引用但是没有进行 `用完后的销毁操作` ，或许会导致后面的数据发生错误和混乱，代码难以调试\n所以建议大家采用如下的解决方案：\n\n```php\n<?php\n$arr = [ 'a', 'b', 'c', 'd' ];\n\nforeach($arr as &$v) {\n    echo $v . \" \";\n}\n\nunset($v);\n\nforeach($arr as $v) {\n    echo $v . \" \";\n}\n```\n\n或者不使用引用：\n\n```php\n<?php\n$arr = [ 'a', 'b', 'c', 'd' ];\n\nforeach($arr as $v) {\n    echo $v . \" \";\n}\n\nforeach($arr as $v) {\n    echo $v . \" \";\n}\n```\n\n为了避免使用引用出问题或者后续的冗余代码，可以使用包裹函数：\n\n```php\n<?php\n\nfunction loopArrayReference(array $input = null, Closure $callback = null )\n{\n    foreach($input as $index => &$val) {\n        $callback($input, $index, $val);\n    }\n    unset($val);\n}\n\n```\n\n\n### 解析\n这里为什么会发生这种情况，第二个 `foreach` 循环的时候，为什么拿不到最后的一个值？ 原因如下：\nPHP处理引用的时候，会在全局范围定义一个变量( 假设变量为 $t )后续的引用都是操作这个变量，因此我们就知道了，当第一次循环结束的时候，此时\n`$t` 的值保存的是 `$arr` 的最后一个值 `'d'`， 此时 `$t` 是引用，相当于 `C语言` 里面的 `指针`\n当进行到第二次循环处理的时候:\n\n处理第一个元素的时候\n```php\n$t = 'a'\n```\n\n处理第二个元素的时候\n```php\n$t = 'b'\n```\n\n处理第三个元素的时候\n```php\n$t = 'c'\n```\n\n处理第四个元素的时候,此时保存的是前一个元素的值，也就是第三个元素的值\n```php\n$t = 'c'\n```\n\n所以得到输出:\n```bash\na b c d\na b c c\n```\n\n### 后记\n如果一定要使用引用，一定要记得进行使用后的销毁操作,这个也是很多只会PHP业务层代码的程序员容易忘记的事情。\n\n\n","slug":"PHP语言的foreach语句引用的问题","published":1,"updated":"2020-08-02T01:25:31.897Z","_id":"ckdccyasn00007udod6gm0pui","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>请看如下代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$arr = [ <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span> ];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span>($arr <span class=\"keyword\">as</span> &amp;$v) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $v . <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span>($arr <span class=\"keyword\">as</span> $v) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $v . <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>执行命令获取得到的输出:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a b c d </span><br><span class=\"line\">a b c c</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"后果\"><a href=\"#后果\" class=\"headerlink\" title=\"后果\"></a>后果</h3><p>如果大家在 <code>foreach</code> 循环中滥用引用但是没有进行 <code>用完后的销毁操作</code> ，或许会导致后面的数据发生错误和混乱，代码难以调试<br>所以建议大家采用如下的解决方案：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$arr = [ <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span> ];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span>($arr <span class=\"keyword\">as</span> &amp;$v) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $v . <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">unset</span>($v);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span>($arr <span class=\"keyword\">as</span> $v) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $v . <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>或者不使用引用：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$arr = [ <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span> ];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span>($arr <span class=\"keyword\">as</span> $v) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $v . <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span>($arr <span class=\"keyword\">as</span> $v) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $v . <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为了避免使用引用出问题或者后续的冗余代码，可以使用包裹函数：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loopArrayReference</span>(<span class=\"params\"><span class=\"keyword\">array</span> $input = <span class=\"literal\">null</span>, <span class=\"built_in\">Closure</span> $callback = <span class=\"literal\">null</span> </span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span>($input <span class=\"keyword\">as</span> $index =&gt; &amp;$val) &#123;</span><br><span class=\"line\">        $callback($input, $index, $val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">unset</span>($val);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>这里为什么会发生这种情况，第二个 <code>foreach</code> 循环的时候，为什么拿不到最后的一个值？ 原因如下：<br>PHP处理引用的时候，会在全局范围定义一个变量( 假设变量为 $t )后续的引用都是操作这个变量，因此我们就知道了，当第一次循环结束的时候，此时<br><code>$t</code> 的值保存的是 <code>$arr</code> 的最后一个值 <code>&#39;d&#39;</code>， 此时 <code>$t</code> 是引用，相当于 <code>C语言</code> 里面的 <code>指针</code><br>当进行到第二次循环处理的时候:</p>\n<p>处理第一个元素的时候</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$t = <span class=\"string\">&#x27;a&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>处理第二个元素的时候</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$t = <span class=\"string\">&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>处理第三个元素的时候</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$t = <span class=\"string\">&#x27;c&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>处理第四个元素的时候,此时保存的是前一个元素的值，也就是第三个元素的值</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$t = <span class=\"string\">&#x27;c&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>所以得到输出:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a b c d</span><br><span class=\"line\">a b c c</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>如果一定要使用引用，一定要记得进行使用后的销毁操作,这个也是很多只会PHP业务层代码的程序员容易忘记的事情。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>请看如下代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$arr = [ <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span> ];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span>($arr <span class=\"keyword\">as</span> &amp;$v) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $v . <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span>($arr <span class=\"keyword\">as</span> $v) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $v . <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>执行命令获取得到的输出:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a b c d </span><br><span class=\"line\">a b c c</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"后果\"><a href=\"#后果\" class=\"headerlink\" title=\"后果\"></a>后果</h3><p>如果大家在 <code>foreach</code> 循环中滥用引用但是没有进行 <code>用完后的销毁操作</code> ，或许会导致后面的数据发生错误和混乱，代码难以调试<br>所以建议大家采用如下的解决方案：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$arr = [ <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span> ];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span>($arr <span class=\"keyword\">as</span> &amp;$v) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $v . <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">unset</span>($v);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span>($arr <span class=\"keyword\">as</span> $v) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $v . <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>或者不使用引用：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$arr = [ <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span> ];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span>($arr <span class=\"keyword\">as</span> $v) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $v . <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span>($arr <span class=\"keyword\">as</span> $v) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $v . <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为了避免使用引用出问题或者后续的冗余代码，可以使用包裹函数：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loopArrayReference</span>(<span class=\"params\"><span class=\"keyword\">array</span> $input = <span class=\"literal\">null</span>, <span class=\"built_in\">Closure</span> $callback = <span class=\"literal\">null</span> </span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span>($input <span class=\"keyword\">as</span> $index =&gt; &amp;$val) &#123;</span><br><span class=\"line\">        $callback($input, $index, $val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">unset</span>($val);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>这里为什么会发生这种情况，第二个 <code>foreach</code> 循环的时候，为什么拿不到最后的一个值？ 原因如下：<br>PHP处理引用的时候，会在全局范围定义一个变量( 假设变量为 $t )后续的引用都是操作这个变量，因此我们就知道了，当第一次循环结束的时候，此时<br><code>$t</code> 的值保存的是 <code>$arr</code> 的最后一个值 <code>&#39;d&#39;</code>， 此时 <code>$t</code> 是引用，相当于 <code>C语言</code> 里面的 <code>指针</code><br>当进行到第二次循环处理的时候:</p>\n<p>处理第一个元素的时候</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$t = <span class=\"string\">&#x27;a&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>处理第二个元素的时候</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$t = <span class=\"string\">&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>处理第三个元素的时候</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$t = <span class=\"string\">&#x27;c&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>处理第四个元素的时候,此时保存的是前一个元素的值，也就是第三个元素的值</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$t = <span class=\"string\">&#x27;c&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>所以得到输出:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a b c d</span><br><span class=\"line\">a b c c</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>如果一定要使用引用，一定要记得进行使用后的销毁操作,这个也是很多只会PHP业务层代码的程序员容易忘记的事情。</p>\n"},{"title":"MySQL碎片问题跟踪以及解决","date":"2020-08-02T01:53:52.000Z","description":"处理mysql碎片问题","_content":"\n### 什么是 mysql 碎片？\n我们都知道 mysql 的默认每页大小是16k，而Linux系统的默认大小是4k，可以使用如下的命令得到页大小：\n\n```shell script\ngetconf PAGE_SIZE\n```\n\n输出大小如下：\n```shell script\n4096\n```\n\n证明系统的页大小为4kb，但是我们知道mysql的页大小为16kb，这个可以使用如下的命令得到这个值：\n\n```sql mysql\nSHOW VARIABLES LIKE 'innodb_page_size';\n```\n\n```shell script\nVariable_name    Value\ninnodb_page_size 16384\n```\n\n我们既然知道了两个页大小不一致，并且mysql为了避免一次性写入16kb的失败和回滚而采用的 `double buffer write` 技术\n我们这里说的碎片就是因为存储数据的时候，数据大小的变化导致内存的分配而导致的碎片问题\n\n### 碎片会有什么影响？\nMySQL的碎片是由于在存在数据后，对数据进行修改、更新和删除操作，导致了数据页分裂而造成的数据碎片，\n跟C语言里面malloc、free一样，总是频繁的操作会导致存在碎片问题致使引擎内存利用率下降，性能降低\n比如你会发现：同样的一个查询之前好好地，为什么现在查询会变得很慢等等\n\n+ 空间占用过大，但是数据大小没有增加多少\n+ 查询、插入性能变差\n+ 碎片存在导致了数据库的磁盘IO变成了随机IO，增加了磁盘的IO负担，性能变差\n\n### 怎么判断mysql存在碎片？\n通过如下SQL语句进行判断：\n\n+ \n```sql mysql\nSHOW TABLE STATUS LIKE 'table_name'\n```\n+ \n```sql mysql\nSELECT * FROM information_schema.TABLES WHERE TABLE_SCHEMA = 'data_base' AND TABLE_NAME = 'table_name'\n```\n如果看到DATA_FREE列大于0，则表示存在碎片，我们也要注意，不是说这列大于0，就需要进行清理\n而是当其处于一个非理想状态下的较大值时候，我们才进行优化，释放空间，因为清理碎片会对表进行锁库，影响线上的功能，所以我们应该综合考虑清楚在处理\n\n### 碎片怎么清理？\n+ InnoDB\n```sql mysql\nALTER TABLE table_name ENGINE=InnoDB;\n```\n\n+ MyISAM\n```sql mysql\nALTER TABLE table_name ENGINE=InnoDB;\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/MySQL碎片问题跟踪以及解决.md","raw":"---\ntitle: MySQL碎片问题跟踪以及解决\ndate: 2020-08-02 09:53:52\ntags:\n- mysql\n- 碎片\ncategories:\n- tech\ndescription: 处理mysql碎片问题\n---\n\n### 什么是 mysql 碎片？\n我们都知道 mysql 的默认每页大小是16k，而Linux系统的默认大小是4k，可以使用如下的命令得到页大小：\n\n```shell script\ngetconf PAGE_SIZE\n```\n\n输出大小如下：\n```shell script\n4096\n```\n\n证明系统的页大小为4kb，但是我们知道mysql的页大小为16kb，这个可以使用如下的命令得到这个值：\n\n```sql mysql\nSHOW VARIABLES LIKE 'innodb_page_size';\n```\n\n```shell script\nVariable_name    Value\ninnodb_page_size 16384\n```\n\n我们既然知道了两个页大小不一致，并且mysql为了避免一次性写入16kb的失败和回滚而采用的 `double buffer write` 技术\n我们这里说的碎片就是因为存储数据的时候，数据大小的变化导致内存的分配而导致的碎片问题\n\n### 碎片会有什么影响？\nMySQL的碎片是由于在存在数据后，对数据进行修改、更新和删除操作，导致了数据页分裂而造成的数据碎片，\n跟C语言里面malloc、free一样，总是频繁的操作会导致存在碎片问题致使引擎内存利用率下降，性能降低\n比如你会发现：同样的一个查询之前好好地，为什么现在查询会变得很慢等等\n\n+ 空间占用过大，但是数据大小没有增加多少\n+ 查询、插入性能变差\n+ 碎片存在导致了数据库的磁盘IO变成了随机IO，增加了磁盘的IO负担，性能变差\n\n### 怎么判断mysql存在碎片？\n通过如下SQL语句进行判断：\n\n+ \n```sql mysql\nSHOW TABLE STATUS LIKE 'table_name'\n```\n+ \n```sql mysql\nSELECT * FROM information_schema.TABLES WHERE TABLE_SCHEMA = 'data_base' AND TABLE_NAME = 'table_name'\n```\n如果看到DATA_FREE列大于0，则表示存在碎片，我们也要注意，不是说这列大于0，就需要进行清理\n而是当其处于一个非理想状态下的较大值时候，我们才进行优化，释放空间，因为清理碎片会对表进行锁库，影响线上的功能，所以我们应该综合考虑清楚在处理\n\n### 碎片怎么清理？\n+ InnoDB\n```sql mysql\nALTER TABLE table_name ENGINE=InnoDB;\n```\n\n+ MyISAM\n```sql mysql\nALTER TABLE table_name ENGINE=InnoDB;\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"MySQL碎片问题跟踪以及解决","published":1,"updated":"2020-08-02T02:25:57.541Z","_id":"ckdcfla7p0000pndo0ow88op2","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"什么是-mysql-碎片？\"><a href=\"#什么是-mysql-碎片？\" class=\"headerlink\" title=\"什么是 mysql 碎片？\"></a>什么是 mysql 碎片？</h3><p>我们都知道 mysql 的默认每页大小是16k，而Linux系统的默认大小是4k，可以使用如下的命令得到页大小：</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getconf PAGE_SIZE</span><br></pre></td></tr></table></figure>\n\n<p>输出大小如下：</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4096</span><br></pre></td></tr></table></figure>\n\n<p>证明系统的页大小为4kb，但是我们知道mysql的页大小为16kb，这个可以使用如下的命令得到这个值：</p>\n<figure class=\"highlight sql\"><figcaption><span>mysql</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">VARIABLES</span> <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;innodb_page_size&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Variable_name    Value</span><br><span class=\"line\">innodb_page_size 16384</span><br></pre></td></tr></table></figure>\n\n<p>我们既然知道了两个页大小不一致，并且mysql为了避免一次性写入16kb的失败和回滚而采用的 <code>double buffer write</code> 技术<br>我们这里说的碎片就是因为存储数据的时候，数据大小的变化导致内存的分配而导致的碎片问题</p>\n<h3 id=\"碎片会有什么影响？\"><a href=\"#碎片会有什么影响？\" class=\"headerlink\" title=\"碎片会有什么影响？\"></a>碎片会有什么影响？</h3><p>MySQL的碎片是由于在存在数据后，对数据进行修改、更新和删除操作，导致了数据页分裂而造成的数据碎片，<br>跟C语言里面malloc、free一样，总是频繁的操作会导致存在碎片问题致使引擎内存利用率下降，性能降低<br>比如你会发现：同样的一个查询之前好好地，为什么现在查询会变得很慢等等</p>\n<ul>\n<li>空间占用过大，但是数据大小没有增加多少</li>\n<li>查询、插入性能变差</li>\n<li>碎片存在导致了数据库的磁盘IO变成了随机IO，增加了磁盘的IO负担，性能变差</li>\n</ul>\n<h3 id=\"怎么判断mysql存在碎片？\"><a href=\"#怎么判断mysql存在碎片？\" class=\"headerlink\" title=\"怎么判断mysql存在碎片？\"></a>怎么判断mysql存在碎片？</h3><p>通过如下SQL语句进行判断：</p>\n<ul>\n<li><figure class=\"highlight sql\"><figcaption><span>mysql</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">STATUS</span> <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;table_name&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li><figure class=\"highlight sql\"><figcaption><span>mysql</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> information_schema.TABLES <span class=\"keyword\">WHERE</span> TABLE_SCHEMA = <span class=\"string\">&#x27;data_base&#x27;</span> <span class=\"keyword\">AND</span> TABLE_NAME = <span class=\"string\">&#x27;table_name&#x27;</span></span><br></pre></td></tr></table></figure>\n如果看到DATA_FREE列大于0，则表示存在碎片，我们也要注意，不是说这列大于0，就需要进行清理<br>而是当其处于一个非理想状态下的较大值时候，我们才进行优化，释放空间，因为清理碎片会对表进行锁库，影响线上的功能，所以我们应该综合考虑清楚在处理</li>\n</ul>\n<h3 id=\"碎片怎么清理？\"><a href=\"#碎片怎么清理？\" class=\"headerlink\" title=\"碎片怎么清理？\"></a>碎片怎么清理？</h3><ul>\n<li><p>InnoDB</p>\n<figure class=\"highlight sql\"><figcaption><span>mysql</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>MyISAM</p>\n<figure class=\"highlight sql\"><figcaption><span>mysql</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是-mysql-碎片？\"><a href=\"#什么是-mysql-碎片？\" class=\"headerlink\" title=\"什么是 mysql 碎片？\"></a>什么是 mysql 碎片？</h3><p>我们都知道 mysql 的默认每页大小是16k，而Linux系统的默认大小是4k，可以使用如下的命令得到页大小：</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getconf PAGE_SIZE</span><br></pre></td></tr></table></figure>\n\n<p>输出大小如下：</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4096</span><br></pre></td></tr></table></figure>\n\n<p>证明系统的页大小为4kb，但是我们知道mysql的页大小为16kb，这个可以使用如下的命令得到这个值：</p>\n<figure class=\"highlight sql\"><figcaption><span>mysql</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">VARIABLES</span> <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;innodb_page_size&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Variable_name    Value</span><br><span class=\"line\">innodb_page_size 16384</span><br></pre></td></tr></table></figure>\n\n<p>我们既然知道了两个页大小不一致，并且mysql为了避免一次性写入16kb的失败和回滚而采用的 <code>double buffer write</code> 技术<br>我们这里说的碎片就是因为存储数据的时候，数据大小的变化导致内存的分配而导致的碎片问题</p>\n<h3 id=\"碎片会有什么影响？\"><a href=\"#碎片会有什么影响？\" class=\"headerlink\" title=\"碎片会有什么影响？\"></a>碎片会有什么影响？</h3><p>MySQL的碎片是由于在存在数据后，对数据进行修改、更新和删除操作，导致了数据页分裂而造成的数据碎片，<br>跟C语言里面malloc、free一样，总是频繁的操作会导致存在碎片问题致使引擎内存利用率下降，性能降低<br>比如你会发现：同样的一个查询之前好好地，为什么现在查询会变得很慢等等</p>\n<ul>\n<li>空间占用过大，但是数据大小没有增加多少</li>\n<li>查询、插入性能变差</li>\n<li>碎片存在导致了数据库的磁盘IO变成了随机IO，增加了磁盘的IO负担，性能变差</li>\n</ul>\n<h3 id=\"怎么判断mysql存在碎片？\"><a href=\"#怎么判断mysql存在碎片？\" class=\"headerlink\" title=\"怎么判断mysql存在碎片？\"></a>怎么判断mysql存在碎片？</h3><p>通过如下SQL语句进行判断：</p>\n<ul>\n<li><figure class=\"highlight sql\"><figcaption><span>mysql</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">STATUS</span> <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;table_name&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li><figure class=\"highlight sql\"><figcaption><span>mysql</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> information_schema.TABLES <span class=\"keyword\">WHERE</span> TABLE_SCHEMA = <span class=\"string\">&#x27;data_base&#x27;</span> <span class=\"keyword\">AND</span> TABLE_NAME = <span class=\"string\">&#x27;table_name&#x27;</span></span><br></pre></td></tr></table></figure>\n如果看到DATA_FREE列大于0，则表示存在碎片，我们也要注意，不是说这列大于0，就需要进行清理<br>而是当其处于一个非理想状态下的较大值时候，我们才进行优化，释放空间，因为清理碎片会对表进行锁库，影响线上的功能，所以我们应该综合考虑清楚在处理</li>\n</ul>\n<h3 id=\"碎片怎么清理？\"><a href=\"#碎片怎么清理？\" class=\"headerlink\" title=\"碎片怎么清理？\"></a>碎片怎么清理？</h3><ul>\n<li><p>InnoDB</p>\n<figure class=\"highlight sql\"><figcaption><span>mysql</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>MyISAM</p>\n<figure class=\"highlight sql\"><figcaption><span>mysql</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</li>\n</ul>\n"},{"title":"性能分析的原因和手段","date":"2020-08-02T02:27:16.000Z","description":"性能分析以及处理办法","_content":"\n### 性能分析的定义以及组成\n测量任务所耗费的时间，然后对结果进行统计和排序，将重要的任务排到前面\n\n组成部分：\n+ 服务器的性能分析\n+ 应用程序的性能分析\n\n### 服务器的性能分析\n我们可以通过如下几个命令获取整体的性能指标：\n```shell script\nvmstat -S M 1\n```\n\n```shell script\ntop\n```\n\n```shell script\niotop\n```\n\n```shell script\nnethogs\n```\n\n```shell script\nnload\n```\n\n分析整个程序的系统调用和阻塞：\n```shell script\nstrace -p\n```\n\n如果发现恶意程序，可以使用 `kill -9` 或者 `killall app_name` 进行强制关闭:\n```shell script\nkill -9 \nkillall app_name\n```\n\n### mysql性能分析\n\n```sql mysql\nset profiling = 1\nshow profiles\nshow profile for query id\n```\n\n```sql mysql\nshow status\nflush status\n```\n\n```sql mysql\nshow processlist\n```\n\n```sql mysql\nshow index from tableName\nexplain ...\n```\n\n`explain执行的输出样式如下：`\n\n| id | select\\_type | table | type | possible\\_keys | key | key\\_len | ref | rows | Extra |\n| :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- |\n| 1 | SIMPLE | kkpos\\_order | const | PRIMARY | PRIMARY | 4 | const | 1 | NULL |\n\n\n### 性能分析的原因\n+ 资源的过度使用，余量不足\n+ 资源没有正确配置\n+ 资源损坏\n\n\n### 索引的关闭和开启\n\n+ 关闭\n```sql mysql\nALTER TABLE table_name DISABLE KEYS;\n```\n\n+ 开启\n```sql mysql\nALTER TABLE table_name ENABLE KEYS;\n```\n\n### 哈希索引\n\n哈希索引必须回表，因为哈希索引只保留了哈希值和行指针\n\n\n","source":"_posts/性能分析的原因和手段.md","raw":"---\ntitle: 性能分析的原因和手段\ndate: 2020-08-02 10:27:16\ntags:\n- 性能分析\n- vmstat\n- iotop\n- top\n- free\n- strace\ncategories:\n- tech\ndescription: 性能分析以及处理办法\n---\n\n### 性能分析的定义以及组成\n测量任务所耗费的时间，然后对结果进行统计和排序，将重要的任务排到前面\n\n组成部分：\n+ 服务器的性能分析\n+ 应用程序的性能分析\n\n### 服务器的性能分析\n我们可以通过如下几个命令获取整体的性能指标：\n```shell script\nvmstat -S M 1\n```\n\n```shell script\ntop\n```\n\n```shell script\niotop\n```\n\n```shell script\nnethogs\n```\n\n```shell script\nnload\n```\n\n分析整个程序的系统调用和阻塞：\n```shell script\nstrace -p\n```\n\n如果发现恶意程序，可以使用 `kill -9` 或者 `killall app_name` 进行强制关闭:\n```shell script\nkill -9 \nkillall app_name\n```\n\n### mysql性能分析\n\n```sql mysql\nset profiling = 1\nshow profiles\nshow profile for query id\n```\n\n```sql mysql\nshow status\nflush status\n```\n\n```sql mysql\nshow processlist\n```\n\n```sql mysql\nshow index from tableName\nexplain ...\n```\n\n`explain执行的输出样式如下：`\n\n| id | select\\_type | table | type | possible\\_keys | key | key\\_len | ref | rows | Extra |\n| :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- |\n| 1 | SIMPLE | kkpos\\_order | const | PRIMARY | PRIMARY | 4 | const | 1 | NULL |\n\n\n### 性能分析的原因\n+ 资源的过度使用，余量不足\n+ 资源没有正确配置\n+ 资源损坏\n\n\n### 索引的关闭和开启\n\n+ 关闭\n```sql mysql\nALTER TABLE table_name DISABLE KEYS;\n```\n\n+ 开启\n```sql mysql\nALTER TABLE table_name ENABLE KEYS;\n```\n\n### 哈希索引\n\n哈希索引必须回表，因为哈希索引只保留了哈希值和行指针\n\n\n","slug":"性能分析的原因和手段","published":1,"updated":"2020-08-02T02:50:23.980Z","_id":"ckdcgs80t0000zldo2nev1gdz","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"性能分析的定义以及组成\"><a href=\"#性能分析的定义以及组成\" class=\"headerlink\" title=\"性能分析的定义以及组成\"></a>性能分析的定义以及组成</h3><p>测量任务所耗费的时间，然后对结果进行统计和排序，将重要的任务排到前面</p>\n<p>组成部分：</p>\n<ul>\n<li>服务器的性能分析</li>\n<li>应用程序的性能分析</li>\n</ul>\n<h3 id=\"服务器的性能分析\"><a href=\"#服务器的性能分析\" class=\"headerlink\" title=\"服务器的性能分析\"></a>服务器的性能分析</h3><p>我们可以通过如下几个命令获取整体的性能指标：</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vmstat -S M 1</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iotop</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nethogs</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nload</span><br></pre></td></tr></table></figure>\n\n<p>分析整个程序的系统调用和阻塞：</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strace -p</span><br></pre></td></tr></table></figure>\n\n<p>如果发现恶意程序，可以使用 <code>kill -9</code> 或者 <code>killall app_name</code> 进行强制关闭:</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -9 </span><br><span class=\"line\">killall app_name</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mysql性能分析\"><a href=\"#mysql性能分析\" class=\"headerlink\" title=\"mysql性能分析\"></a>mysql性能分析</h3><figure class=\"highlight sql\"><figcaption><span>mysql</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> profiling = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">profiles</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> profile <span class=\"keyword\">for</span> <span class=\"keyword\">query</span> <span class=\"keyword\">id</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><figcaption><span>mysql</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span></span><br><span class=\"line\"><span class=\"keyword\">flush</span> <span class=\"keyword\">status</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><figcaption><span>mysql</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">processlist</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><figcaption><span>mysql</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">index</span> <span class=\"keyword\">from</span> tableName</span><br><span class=\"line\"><span class=\"keyword\">explain</span> ...</span><br></pre></td></tr></table></figure>\n\n<p><code>explain执行的输出样式如下：</code></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">id</th>\n<th align=\"left\">select_type</th>\n<th align=\"left\">table</th>\n<th align=\"left\">type</th>\n<th align=\"left\">possible_keys</th>\n<th align=\"left\">key</th>\n<th align=\"left\">key_len</th>\n<th align=\"left\">ref</th>\n<th align=\"left\">rows</th>\n<th align=\"left\">Extra</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">SIMPLE</td>\n<td align=\"left\">kkpos_order</td>\n<td align=\"left\">const</td>\n<td align=\"left\">PRIMARY</td>\n<td align=\"left\">PRIMARY</td>\n<td align=\"left\">4</td>\n<td align=\"left\">const</td>\n<td align=\"left\">1</td>\n<td align=\"left\">NULL</td>\n</tr>\n</tbody></table>\n<h3 id=\"性能分析的原因\"><a href=\"#性能分析的原因\" class=\"headerlink\" title=\"性能分析的原因\"></a>性能分析的原因</h3><ul>\n<li>资源的过度使用，余量不足</li>\n<li>资源没有正确配置</li>\n<li>资源损坏</li>\n</ul>\n<h3 id=\"索引的关闭和开启\"><a href=\"#索引的关闭和开启\" class=\"headerlink\" title=\"索引的关闭和开启\"></a>索引的关闭和开启</h3><ul>\n<li><p>关闭</p>\n<figure class=\"highlight sql\"><figcaption><span>mysql</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">DISABLE</span> <span class=\"keyword\">KEYS</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>开启</p>\n<figure class=\"highlight sql\"><figcaption><span>mysql</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ENABLE</span> <span class=\"keyword\">KEYS</span>;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"哈希索引\"><a href=\"#哈希索引\" class=\"headerlink\" title=\"哈希索引\"></a>哈希索引</h3><p>哈希索引必须回表，因为哈希索引只保留了哈希值和行指针</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"性能分析的定义以及组成\"><a href=\"#性能分析的定义以及组成\" class=\"headerlink\" title=\"性能分析的定义以及组成\"></a>性能分析的定义以及组成</h3><p>测量任务所耗费的时间，然后对结果进行统计和排序，将重要的任务排到前面</p>\n<p>组成部分：</p>\n<ul>\n<li>服务器的性能分析</li>\n<li>应用程序的性能分析</li>\n</ul>\n<h3 id=\"服务器的性能分析\"><a href=\"#服务器的性能分析\" class=\"headerlink\" title=\"服务器的性能分析\"></a>服务器的性能分析</h3><p>我们可以通过如下几个命令获取整体的性能指标：</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vmstat -S M 1</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iotop</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nethogs</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nload</span><br></pre></td></tr></table></figure>\n\n<p>分析整个程序的系统调用和阻塞：</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strace -p</span><br></pre></td></tr></table></figure>\n\n<p>如果发现恶意程序，可以使用 <code>kill -9</code> 或者 <code>killall app_name</code> 进行强制关闭:</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -9 </span><br><span class=\"line\">killall app_name</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mysql性能分析\"><a href=\"#mysql性能分析\" class=\"headerlink\" title=\"mysql性能分析\"></a>mysql性能分析</h3><figure class=\"highlight sql\"><figcaption><span>mysql</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> profiling = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">profiles</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> profile <span class=\"keyword\">for</span> <span class=\"keyword\">query</span> <span class=\"keyword\">id</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><figcaption><span>mysql</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span></span><br><span class=\"line\"><span class=\"keyword\">flush</span> <span class=\"keyword\">status</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><figcaption><span>mysql</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">processlist</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><figcaption><span>mysql</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">index</span> <span class=\"keyword\">from</span> tableName</span><br><span class=\"line\"><span class=\"keyword\">explain</span> ...</span><br></pre></td></tr></table></figure>\n\n<p><code>explain执行的输出样式如下：</code></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">id</th>\n<th align=\"left\">select_type</th>\n<th align=\"left\">table</th>\n<th align=\"left\">type</th>\n<th align=\"left\">possible_keys</th>\n<th align=\"left\">key</th>\n<th align=\"left\">key_len</th>\n<th align=\"left\">ref</th>\n<th align=\"left\">rows</th>\n<th align=\"left\">Extra</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">SIMPLE</td>\n<td align=\"left\">kkpos_order</td>\n<td align=\"left\">const</td>\n<td align=\"left\">PRIMARY</td>\n<td align=\"left\">PRIMARY</td>\n<td align=\"left\">4</td>\n<td align=\"left\">const</td>\n<td align=\"left\">1</td>\n<td align=\"left\">NULL</td>\n</tr>\n</tbody></table>\n<h3 id=\"性能分析的原因\"><a href=\"#性能分析的原因\" class=\"headerlink\" title=\"性能分析的原因\"></a>性能分析的原因</h3><ul>\n<li>资源的过度使用，余量不足</li>\n<li>资源没有正确配置</li>\n<li>资源损坏</li>\n</ul>\n<h3 id=\"索引的关闭和开启\"><a href=\"#索引的关闭和开启\" class=\"headerlink\" title=\"索引的关闭和开启\"></a>索引的关闭和开启</h3><ul>\n<li><p>关闭</p>\n<figure class=\"highlight sql\"><figcaption><span>mysql</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">DISABLE</span> <span class=\"keyword\">KEYS</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>开启</p>\n<figure class=\"highlight sql\"><figcaption><span>mysql</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ENABLE</span> <span class=\"keyword\">KEYS</span>;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"哈希索引\"><a href=\"#哈希索引\" class=\"headerlink\" title=\"哈希索引\"></a>哈希索引</h3><p>哈希索引必须回表，因为哈希索引只保留了哈希值和行指针</p>\n"},{"title":"WEB安全问题","date":"2020-08-02T06:05:16.000Z","description":"WEB安全问题","_content":"\n### 什么是WEB安全？\nWEB安全是指网络编码安全问题，防止各种注入、代码漏洞问题，维护WEB网络安全\n\n### PHP WEB安全的种类\n- SQL注入\n\nSQL注入应该算是非常常见的一种安全编码问题，因为现在一般下而言，很多开发都是直接拼接SQL语句，如下就是一个常见的例子：\n\n网站通过PHP获取用户信息：\n```php php\n<?php\n\n$username = $_GET['username'];\n$query = \"SELECT * FROM users WHERE username = '$username'\";\n```\n\n攻击者控制通过 GET 和 POST 发送的查询（或者例如 UA 的一些其他查询）。一般情况下，你希望查询户名为「 terry 」的用户产生的 SQL 语句如下：\n\n```sql mysql\nSELECT * FROM users WHERE username = 'peter'\n```\n\n如果客户端上送特殊的参数，如： 击者发送了特定的用户名参数，例如：`' OR '1'='1` ，那么拼接的SQL如下：\n\n```sql mysql\nSELECT * FROM users WHERE username = 'terry' OR '1' = '1'\n```\n\n所以这里建议使用mysql的预处理功能，能够防范SQL注入风险\n\n- XSS 跨站脚本攻击\n\n```html\n<body>\n<?php\n$searchQuery = $_GET['q'];\n/* some search magic here */\n?>\n<h1>You searched for: <?php echo $searchQuery; ?></h1>\n<p>We found: Absolutely nothing because this is a demo</p>\n</body>\n```\n\n因为我们把用户的内容直接打印出来，不经过任何过滤，非法用户可以拼接 URL：\n\n```html\nsearch.php?q=%3Cscript%3Ealert(1)%3B%3C%2Fscript%3E\n```\n\nPHP 渲染出来的内容如下，可以看到 Javascript 代码会被直接执行：\n```html\n<body>\n<h1>You searched for: <script>alert(1);</script></h1>\n<p>We found: Absolutely nothing because this is a demo</p>\n</body>\n```\n\nJavaScript 可以完成如下工作：\n+ 偷走你用户浏览器里的 Cookie；\n+ 通过浏览器的记住密码功能获取到你的站点登录账号和密码；\n+ 盗取用户的机密信息；\n+ 你的用户在站点上能做到的事情，有了 JS 权限执行权限就都能做，也就是说 A 用户可以模拟成为任何用户；\n+ 在你的网页中嵌入恶意代码\n\n如果防止此类问题，PHP可以使用函数 `htmlentities` 处理：\n```php php\n<?php\n$searchQuery = htmlentities($searchQuery, ENT_QUOTES);\n```\n\n另外必须使用 Cookie 时，如果无需 JS 读取的话，请必须设置为 \"HTTP ONLY\"。这个设置可以令 JavaScript 无法读取 PHP 端种的 Cookie。\n\n- XSRF/CSRF\n\nCSRF 是跨站请求伪造的缩写，它是攻击者通过一些技术手段欺骗用户去访问曾经认证过的网站并运行一些操作。\n\n```php php\n<?php\n//delete-account.php\n\n$confirm = $_GET['confirm'];\n\nif($confirm === 'yes') {\n  //goodbye\n}\n```\n\n攻击者可以在他的站点上构建一个触发这个 URL 的表单（同样适用于 POST 的表单），或者将 URL 加载为图片诱惑用户点击：\n```html html\n<img src=\"https://example.com/delete-account.php?confirm=yes\" />\n```\n\n- LFI 本地文件包含攻击\n\nLFI （本地文件包含） 是一个用户未经验证从磁盘读取文件的漏洞。\n我经常遇到编程不规范的路由代码示例，它们不验证过滤用户的输入。我们用以下文件为例，将它要渲染的模板文件用 GET 请求加载。\n```php php\n<body>\n<?php\n  $page = $_GET['page'];\n  if(!$page) {\n    $page = 'main.php';\n  }\n  include($page);\n?>\n</body>\n```\n\n由于 Include 可以加载任何文件，不仅仅是PHP，攻击者可以将系统上的任何文件作为包含目标传递。\n```html html\nindex.php?page=../../etc/passwd\n```\n要防御此类攻击，你必须仔细考虑允许用户输入的类型，并删除可能有害的字符，如输入字符中的“.” “/” “\\”。\n如果你真的想使用像这样的路由系统（我不建议以任何方式），你可以自动附加 PHP 扩展，删除任何非 [a-zA-Z0-9-_] 的字符，并指定从专用的模板文件夹中加载，以免被包含任何非模板文件。\n我在不同的开发文档中，多次看到造成此类漏洞的 PHP 代码。从一开始就要有清晰的设计思路，允许所需要包含的文件类型，并删除掉多余的内容。你还可以构造要读取文件的绝对路径，并验证文件是否存在来作为保护，而不是任何位置都给予读取。\n\n- 不充分的密码哈希\n现在单纯使用md5、sha1算法是不安全的，如果需要加密客户密码，需要使用新版本的函数 `password_hash` 和 `password_verify`\n\n新版的 PHP 中也自带了安全的密码哈希函数 password_hash ，此函数已经包含了加盐处理。对应的密码验证函数为 password_verify 用来检测密码是否正确。password_verify 还可有效防止 时序攻击.\n\n使用例子：\n```php php\n<?php\n\n//user signup\n$password = $_POST['password'];\n$hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n//login\n$password = $_POST['password'];\n$hash = '1234'; //load this value from your db\n\nif(password_verify($password, $hash)) {\n  echo 'Password is valid!';\n} else {\n  echo 'Invalid password.';\n}\n```\n\n- 中间人攻击\n\nMITM （中间人） 攻击不是针对服务器直接攻击，而是针对用户进行，攻击者作为中间人欺骗服务器他是用户\n欺骗用户他是服务器，从而来拦截用户与网站的流量，并从中注入恶意内容或者读取私密信息，通常发生在公共 WiFi 网络中\n也有可能发生在其他流量通过的地方，例如ISP运营商。对此的唯一防御是使用 HTTPS，使用 HTTPS 可以将你的连接加密\n并且无法读取或者篡改流量。你可以从 Let's Encrypt 获取免费的 SSL 证书，或从其他供应商处购买\n这里不详细介绍如何正确配置 WEB 服务器，因为这与应用程序安全性无关，且在很大程度上取决于你的设置。\n你还可以采取一些措施使 HTTPS 更安全，在 WEB 服务器配置加上 Strict-Transport-Security 标示头\n此头部信息告诉浏览器，你的网站始终通过 HTTPS 访问，如果未通过 HTTPS 将返回错误报告提示浏览器不应显示该页面。\n然而，这里有个明显的问题，如果浏览器之前从未访问过你的网站，则无法知道你使用此标示头，这时候就需要用到 Hstspreload。\n\n- 命令注入\n\n这可能是服务器遇到的最严重的攻击，命令注入的目标是欺骗服务器执行任意 Shell 命令\n\n你如果使用 shell_exec 或是 exec 函数。让我们做一个小例子，允许用户简单的从服务器 Ping 不同的主机。\n\n```php php\n<?php\n\n$targetIp = $_GET['ip'];\n$output = shell_exec(\"ping -c 5 $targetIp\");\n```\n\n输出将包括对目标主机 Ping 5次。除非采用 sh 命令执行 Shell 脚本，否则攻击者可以执行想要的任何操作。\n```php php\nping.php?ip=8.8.8.8;ls -l /etc\n```\n\nShell 将执行 Ping 和由攻击者拼接的第二个命令，这显然是非常危险的。\n`escapeshellarg` 转义用户的输入并将其封装成单引号。\n\n```php php\n<?php\n\n$targetIp = escapeshellarg($_GET['ip']);\n$output = shell_exec(\"ping -c 5 $targetIp\");\n```\n\n- XXE\n\nXXE （XML 外部实体） 是一种应用程序使用配置不正确的 XML 解析器解析外部 XML 时，导致的本地文件包含攻击，甚至可以远程代码执行。\n\nXML 有一个鲜为人知的特性，它允许文档作者将远程和本地文件作为实体包含在其 XML 文件中。\n\n```xml xml\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n <!DOCTYPE foo [\n   <!ELEMENT foo ANY >\n   <!ENTITY passwd SYSTEM \"file:///etc/passwd\" >]>\n   <foo>&passwd;</foo>\n```\n\n如果你使用 libxml 可以调用 libxml_disable_entity_loader 来保护自己免受此类攻击。使用前请仔细检查 XML 库的默认配置，以确保配置成功。\n\n","source":"_posts/WEB安全问题.md","raw":"---\ntitle: WEB安全问题\ndate: 2020-08-02 14:05:16\ntags:\n- WEB\n- SQL注入\n- XSS\n- CSRF\n- XEE\n- LFI\ncategories:\n- tech\ndescription: WEB安全问题\n---\n\n### 什么是WEB安全？\nWEB安全是指网络编码安全问题，防止各种注入、代码漏洞问题，维护WEB网络安全\n\n### PHP WEB安全的种类\n- SQL注入\n\nSQL注入应该算是非常常见的一种安全编码问题，因为现在一般下而言，很多开发都是直接拼接SQL语句，如下就是一个常见的例子：\n\n网站通过PHP获取用户信息：\n```php php\n<?php\n\n$username = $_GET['username'];\n$query = \"SELECT * FROM users WHERE username = '$username'\";\n```\n\n攻击者控制通过 GET 和 POST 发送的查询（或者例如 UA 的一些其他查询）。一般情况下，你希望查询户名为「 terry 」的用户产生的 SQL 语句如下：\n\n```sql mysql\nSELECT * FROM users WHERE username = 'peter'\n```\n\n如果客户端上送特殊的参数，如： 击者发送了特定的用户名参数，例如：`' OR '1'='1` ，那么拼接的SQL如下：\n\n```sql mysql\nSELECT * FROM users WHERE username = 'terry' OR '1' = '1'\n```\n\n所以这里建议使用mysql的预处理功能，能够防范SQL注入风险\n\n- XSS 跨站脚本攻击\n\n```html\n<body>\n<?php\n$searchQuery = $_GET['q'];\n/* some search magic here */\n?>\n<h1>You searched for: <?php echo $searchQuery; ?></h1>\n<p>We found: Absolutely nothing because this is a demo</p>\n</body>\n```\n\n因为我们把用户的内容直接打印出来，不经过任何过滤，非法用户可以拼接 URL：\n\n```html\nsearch.php?q=%3Cscript%3Ealert(1)%3B%3C%2Fscript%3E\n```\n\nPHP 渲染出来的内容如下，可以看到 Javascript 代码会被直接执行：\n```html\n<body>\n<h1>You searched for: <script>alert(1);</script></h1>\n<p>We found: Absolutely nothing because this is a demo</p>\n</body>\n```\n\nJavaScript 可以完成如下工作：\n+ 偷走你用户浏览器里的 Cookie；\n+ 通过浏览器的记住密码功能获取到你的站点登录账号和密码；\n+ 盗取用户的机密信息；\n+ 你的用户在站点上能做到的事情，有了 JS 权限执行权限就都能做，也就是说 A 用户可以模拟成为任何用户；\n+ 在你的网页中嵌入恶意代码\n\n如果防止此类问题，PHP可以使用函数 `htmlentities` 处理：\n```php php\n<?php\n$searchQuery = htmlentities($searchQuery, ENT_QUOTES);\n```\n\n另外必须使用 Cookie 时，如果无需 JS 读取的话，请必须设置为 \"HTTP ONLY\"。这个设置可以令 JavaScript 无法读取 PHP 端种的 Cookie。\n\n- XSRF/CSRF\n\nCSRF 是跨站请求伪造的缩写，它是攻击者通过一些技术手段欺骗用户去访问曾经认证过的网站并运行一些操作。\n\n```php php\n<?php\n//delete-account.php\n\n$confirm = $_GET['confirm'];\n\nif($confirm === 'yes') {\n  //goodbye\n}\n```\n\n攻击者可以在他的站点上构建一个触发这个 URL 的表单（同样适用于 POST 的表单），或者将 URL 加载为图片诱惑用户点击：\n```html html\n<img src=\"https://example.com/delete-account.php?confirm=yes\" />\n```\n\n- LFI 本地文件包含攻击\n\nLFI （本地文件包含） 是一个用户未经验证从磁盘读取文件的漏洞。\n我经常遇到编程不规范的路由代码示例，它们不验证过滤用户的输入。我们用以下文件为例，将它要渲染的模板文件用 GET 请求加载。\n```php php\n<body>\n<?php\n  $page = $_GET['page'];\n  if(!$page) {\n    $page = 'main.php';\n  }\n  include($page);\n?>\n</body>\n```\n\n由于 Include 可以加载任何文件，不仅仅是PHP，攻击者可以将系统上的任何文件作为包含目标传递。\n```html html\nindex.php?page=../../etc/passwd\n```\n要防御此类攻击，你必须仔细考虑允许用户输入的类型，并删除可能有害的字符，如输入字符中的“.” “/” “\\”。\n如果你真的想使用像这样的路由系统（我不建议以任何方式），你可以自动附加 PHP 扩展，删除任何非 [a-zA-Z0-9-_] 的字符，并指定从专用的模板文件夹中加载，以免被包含任何非模板文件。\n我在不同的开发文档中，多次看到造成此类漏洞的 PHP 代码。从一开始就要有清晰的设计思路，允许所需要包含的文件类型，并删除掉多余的内容。你还可以构造要读取文件的绝对路径，并验证文件是否存在来作为保护，而不是任何位置都给予读取。\n\n- 不充分的密码哈希\n现在单纯使用md5、sha1算法是不安全的，如果需要加密客户密码，需要使用新版本的函数 `password_hash` 和 `password_verify`\n\n新版的 PHP 中也自带了安全的密码哈希函数 password_hash ，此函数已经包含了加盐处理。对应的密码验证函数为 password_verify 用来检测密码是否正确。password_verify 还可有效防止 时序攻击.\n\n使用例子：\n```php php\n<?php\n\n//user signup\n$password = $_POST['password'];\n$hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n//login\n$password = $_POST['password'];\n$hash = '1234'; //load this value from your db\n\nif(password_verify($password, $hash)) {\n  echo 'Password is valid!';\n} else {\n  echo 'Invalid password.';\n}\n```\n\n- 中间人攻击\n\nMITM （中间人） 攻击不是针对服务器直接攻击，而是针对用户进行，攻击者作为中间人欺骗服务器他是用户\n欺骗用户他是服务器，从而来拦截用户与网站的流量，并从中注入恶意内容或者读取私密信息，通常发生在公共 WiFi 网络中\n也有可能发生在其他流量通过的地方，例如ISP运营商。对此的唯一防御是使用 HTTPS，使用 HTTPS 可以将你的连接加密\n并且无法读取或者篡改流量。你可以从 Let's Encrypt 获取免费的 SSL 证书，或从其他供应商处购买\n这里不详细介绍如何正确配置 WEB 服务器，因为这与应用程序安全性无关，且在很大程度上取决于你的设置。\n你还可以采取一些措施使 HTTPS 更安全，在 WEB 服务器配置加上 Strict-Transport-Security 标示头\n此头部信息告诉浏览器，你的网站始终通过 HTTPS 访问，如果未通过 HTTPS 将返回错误报告提示浏览器不应显示该页面。\n然而，这里有个明显的问题，如果浏览器之前从未访问过你的网站，则无法知道你使用此标示头，这时候就需要用到 Hstspreload。\n\n- 命令注入\n\n这可能是服务器遇到的最严重的攻击，命令注入的目标是欺骗服务器执行任意 Shell 命令\n\n你如果使用 shell_exec 或是 exec 函数。让我们做一个小例子，允许用户简单的从服务器 Ping 不同的主机。\n\n```php php\n<?php\n\n$targetIp = $_GET['ip'];\n$output = shell_exec(\"ping -c 5 $targetIp\");\n```\n\n输出将包括对目标主机 Ping 5次。除非采用 sh 命令执行 Shell 脚本，否则攻击者可以执行想要的任何操作。\n```php php\nping.php?ip=8.8.8.8;ls -l /etc\n```\n\nShell 将执行 Ping 和由攻击者拼接的第二个命令，这显然是非常危险的。\n`escapeshellarg` 转义用户的输入并将其封装成单引号。\n\n```php php\n<?php\n\n$targetIp = escapeshellarg($_GET['ip']);\n$output = shell_exec(\"ping -c 5 $targetIp\");\n```\n\n- XXE\n\nXXE （XML 外部实体） 是一种应用程序使用配置不正确的 XML 解析器解析外部 XML 时，导致的本地文件包含攻击，甚至可以远程代码执行。\n\nXML 有一个鲜为人知的特性，它允许文档作者将远程和本地文件作为实体包含在其 XML 文件中。\n\n```xml xml\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n <!DOCTYPE foo [\n   <!ELEMENT foo ANY >\n   <!ENTITY passwd SYSTEM \"file:///etc/passwd\" >]>\n   <foo>&passwd;</foo>\n```\n\n如果你使用 libxml 可以调用 libxml_disable_entity_loader 来保护自己免受此类攻击。使用前请仔细检查 XML 库的默认配置，以确保配置成功。\n\n","slug":"WEB安全问题","published":1,"updated":"2020-08-02T06:22:52.424Z","_id":"ckdcokkvy0000b2do231w7zd4","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"什么是WEB安全？\"><a href=\"#什么是WEB安全？\" class=\"headerlink\" title=\"什么是WEB安全？\"></a>什么是WEB安全？</h3><p>WEB安全是指网络编码安全问题，防止各种注入、代码漏洞问题，维护WEB网络安全</p>\n<h3 id=\"PHP-WEB安全的种类\"><a href=\"#PHP-WEB安全的种类\" class=\"headerlink\" title=\"PHP WEB安全的种类\"></a>PHP WEB安全的种类</h3><ul>\n<li>SQL注入</li>\n</ul>\n<p>SQL注入应该算是非常常见的一种安全编码问题，因为现在一般下而言，很多开发都是直接拼接SQL语句，如下就是一个常见的例子：</p>\n<p>网站通过PHP获取用户信息：</p>\n<figure class=\"highlight php\"><figcaption><span>php</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$username = $_GET[<span class=\"string\">&#x27;username&#x27;</span>];</span><br><span class=\"line\">$query = <span class=\"string\">&quot;SELECT * FROM users WHERE username = &#x27;$username&#x27;&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>攻击者控制通过 GET 和 POST 发送的查询（或者例如 UA 的一些其他查询）。一般情况下，你希望查询户名为「 terry 」的用户产生的 SQL 语句如下：</p>\n<figure class=\"highlight sql\"><figcaption><span>mysql</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"keyword\">users</span> <span class=\"keyword\">WHERE</span> username = <span class=\"string\">&#x27;peter&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果客户端上送特殊的参数，如： 击者发送了特定的用户名参数，例如：<code>&#39; OR &#39;1&#39;=&#39;1</code> ，那么拼接的SQL如下：</p>\n<figure class=\"highlight sql\"><figcaption><span>mysql</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"keyword\">users</span> <span class=\"keyword\">WHERE</span> username = <span class=\"string\">&#x27;terry&#x27;</span> <span class=\"keyword\">OR</span> <span class=\"string\">&#x27;1&#x27;</span> = <span class=\"string\">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>所以这里建议使用mysql的预处理功能，能够防范SQL注入风险</p>\n<ul>\n<li>XSS 跨站脚本攻击</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">?php</span></span></span><br><span class=\"line\"><span class=\"tag\">$<span class=\"attr\">searchQuery</span> = <span class=\"string\">$_GET[</span>&#x27;<span class=\"attr\">q</span>&#x27;];</span></span><br><span class=\"line\"><span class=\"tag\">/* <span class=\"attr\">some</span> <span class=\"attr\">search</span> <span class=\"attr\">magic</span> <span class=\"attr\">here</span> */</span></span><br><span class=\"line\"><span class=\"tag\">?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>You searched for: <span class=\"tag\">&lt;<span class=\"name\">?php</span> <span class=\"attr\">echo</span> $<span class=\"attr\">searchQuery</span>; ?&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>We found: Absolutely nothing because this is a demo<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>因为我们把用户的内容直接打印出来，不经过任何过滤，非法用户可以拼接 URL：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">search.php?q=%3Cscript%3Ealert(1)%3B%3C%2Fscript%3E</span><br></pre></td></tr></table></figure>\n\n<p>PHP 渲染出来的内容如下，可以看到 Javascript 代码会被直接执行：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>You searched for: <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>alert(1);<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>We found: Absolutely nothing because this is a demo<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>JavaScript 可以完成如下工作：</p>\n<ul>\n<li>偷走你用户浏览器里的 Cookie；</li>\n<li>通过浏览器的记住密码功能获取到你的站点登录账号和密码；</li>\n<li>盗取用户的机密信息；</li>\n<li>你的用户在站点上能做到的事情，有了 JS 权限执行权限就都能做，也就是说 A 用户可以模拟成为任何用户；</li>\n<li>在你的网页中嵌入恶意代码</li>\n</ul>\n<p>如果防止此类问题，PHP可以使用函数 <code>htmlentities</code> 处理：</p>\n<figure class=\"highlight php\"><figcaption><span>php</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$searchQuery = htmlentities($searchQuery, ENT_QUOTES);</span><br></pre></td></tr></table></figure>\n\n<p>另外必须使用 Cookie 时，如果无需 JS 读取的话，请必须设置为 “HTTP ONLY”。这个设置可以令 JavaScript 无法读取 PHP 端种的 Cookie。</p>\n<ul>\n<li>XSRF/CSRF</li>\n</ul>\n<p>CSRF 是跨站请求伪造的缩写，它是攻击者通过一些技术手段欺骗用户去访问曾经认证过的网站并运行一些操作。</p>\n<figure class=\"highlight php\"><figcaption><span>php</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">//delete-account.php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$confirm = $_GET[<span class=\"string\">&#x27;confirm&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>($confirm === <span class=\"string\">&#x27;yes&#x27;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//goodbye</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>攻击者可以在他的站点上构建一个触发这个 URL 的表单（同样适用于 POST 的表单），或者将 URL 加载为图片诱惑用户点击：</p>\n<figure class=\"highlight html\"><figcaption><span>html</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://example.com/delete-account.php?confirm=yes&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>LFI 本地文件包含攻击</li>\n</ul>\n<p>LFI （本地文件包含） 是一个用户未经验证从磁盘读取文件的漏洞。<br>我经常遇到编程不规范的路由代码示例，它们不验证过滤用户的输入。我们用以下文件为例，将它要渲染的模板文件用 GET 请求加载。</p>\n<figure class=\"highlight php\"><figcaption><span>php</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">  $page = $_GET[<span class=\"string\">&#x27;page&#x27;</span>];</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!$page) &#123;</span><br><span class=\"line\">    $page = <span class=\"string\">&#x27;main.php&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">include</span>($page);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>由于 Include 可以加载任何文件，不仅仅是PHP，攻击者可以将系统上的任何文件作为包含目标传递。</p>\n<figure class=\"highlight html\"><figcaption><span>html</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index.php?page=../../etc/passwd</span><br></pre></td></tr></table></figure>\n<p>要防御此类攻击，你必须仔细考虑允许用户输入的类型，并删除可能有害的字符，如输入字符中的“.” “/” “\\”。<br>如果你真的想使用像这样的路由系统（我不建议以任何方式），你可以自动附加 PHP 扩展，删除任何非 [a-zA-Z0-9-_] 的字符，并指定从专用的模板文件夹中加载，以免被包含任何非模板文件。<br>我在不同的开发文档中，多次看到造成此类漏洞的 PHP 代码。从一开始就要有清晰的设计思路，允许所需要包含的文件类型，并删除掉多余的内容。你还可以构造要读取文件的绝对路径，并验证文件是否存在来作为保护，而不是任何位置都给予读取。</p>\n<ul>\n<li>不充分的密码哈希<br>现在单纯使用md5、sha1算法是不安全的，如果需要加密客户密码，需要使用新版本的函数 <code>password_hash</code> 和 <code>password_verify</code></li>\n</ul>\n<p>新版的 PHP 中也自带了安全的密码哈希函数 password_hash ，此函数已经包含了加盐处理。对应的密码验证函数为 password_verify 用来检测密码是否正确。password_verify 还可有效防止 时序攻击.</p>\n<p>使用例子：</p>\n<figure class=\"highlight php\"><figcaption><span>php</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//user signup</span></span><br><span class=\"line\">$password = $_POST[<span class=\"string\">&#x27;password&#x27;</span>];</span><br><span class=\"line\">$hashedPassword = password_hash($password, PASSWORD_DEFAULT);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//login</span></span><br><span class=\"line\">$password = $_POST[<span class=\"string\">&#x27;password&#x27;</span>];</span><br><span class=\"line\">$hash = <span class=\"string\">&#x27;1234&#x27;</span>; <span class=\"comment\">//load this value from your db</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(password_verify($password, $hash)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;Password is valid!&#x27;</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;Invalid password.&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>中间人攻击</li>\n</ul>\n<p>MITM （中间人） 攻击不是针对服务器直接攻击，而是针对用户进行，攻击者作为中间人欺骗服务器他是用户<br>欺骗用户他是服务器，从而来拦截用户与网站的流量，并从中注入恶意内容或者读取私密信息，通常发生在公共 WiFi 网络中<br>也有可能发生在其他流量通过的地方，例如ISP运营商。对此的唯一防御是使用 HTTPS，使用 HTTPS 可以将你的连接加密<br>并且无法读取或者篡改流量。你可以从 Let’s Encrypt 获取免费的 SSL 证书，或从其他供应商处购买<br>这里不详细介绍如何正确配置 WEB 服务器，因为这与应用程序安全性无关，且在很大程度上取决于你的设置。<br>你还可以采取一些措施使 HTTPS 更安全，在 WEB 服务器配置加上 Strict-Transport-Security 标示头<br>此头部信息告诉浏览器，你的网站始终通过 HTTPS 访问，如果未通过 HTTPS 将返回错误报告提示浏览器不应显示该页面。<br>然而，这里有个明显的问题，如果浏览器之前从未访问过你的网站，则无法知道你使用此标示头，这时候就需要用到 Hstspreload。</p>\n<ul>\n<li>命令注入</li>\n</ul>\n<p>这可能是服务器遇到的最严重的攻击，命令注入的目标是欺骗服务器执行任意 Shell 命令</p>\n<p>你如果使用 shell_exec 或是 exec 函数。让我们做一个小例子，允许用户简单的从服务器 Ping 不同的主机。</p>\n<figure class=\"highlight php\"><figcaption><span>php</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$targetIp = $_GET[<span class=\"string\">&#x27;ip&#x27;</span>];</span><br><span class=\"line\">$output = shell_exec(<span class=\"string\">&quot;ping -c 5 $targetIp&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>输出将包括对目标主机 Ping 5次。除非采用 sh 命令执行 Shell 脚本，否则攻击者可以执行想要的任何操作。</p>\n<figure class=\"highlight php\"><figcaption><span>php</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping.php?ip=<span class=\"number\">8.8</span><span class=\"number\">.8</span><span class=\"number\">.8</span>;ls -l /etc</span><br></pre></td></tr></table></figure>\n\n<p>Shell 将执行 Ping 和由攻击者拼接的第二个命令，这显然是非常危险的。<br><code>escapeshellarg</code> 转义用户的输入并将其封装成单引号。</p>\n<figure class=\"highlight php\"><figcaption><span>php</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$targetIp = escapeshellarg($_GET[<span class=\"string\">&#x27;ip&#x27;</span>]);</span><br><span class=\"line\">$output = shell_exec(<span class=\"string\">&quot;ping -c 5 $targetIp&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>XXE</li>\n</ul>\n<p>XXE （XML 外部实体） 是一种应用程序使用配置不正确的 XML 解析器解析外部 XML 时，导致的本地文件包含攻击，甚至可以远程代码执行。</p>\n<p>XML 有一个鲜为人知的特性，它允许文档作者将远程和本地文件作为实体包含在其 XML 文件中。</p>\n<figure class=\"highlight xml\"><figcaption><span>xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span></span><br><span class=\"line\"> <span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [</span></span><br><span class=\"line\"><span class=\"meta\">   <span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span> &gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">   <span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">passwd</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///etc/passwd&quot;</span> &gt;</span>]&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">foo</span>&gt;</span><span class=\"symbol\">&amp;passwd;</span><span class=\"tag\">&lt;/<span class=\"name\">foo</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果你使用 libxml 可以调用 libxml_disable_entity_loader 来保护自己免受此类攻击。使用前请仔细检查 XML 库的默认配置，以确保配置成功。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是WEB安全？\"><a href=\"#什么是WEB安全？\" class=\"headerlink\" title=\"什么是WEB安全？\"></a>什么是WEB安全？</h3><p>WEB安全是指网络编码安全问题，防止各种注入、代码漏洞问题，维护WEB网络安全</p>\n<h3 id=\"PHP-WEB安全的种类\"><a href=\"#PHP-WEB安全的种类\" class=\"headerlink\" title=\"PHP WEB安全的种类\"></a>PHP WEB安全的种类</h3><ul>\n<li>SQL注入</li>\n</ul>\n<p>SQL注入应该算是非常常见的一种安全编码问题，因为现在一般下而言，很多开发都是直接拼接SQL语句，如下就是一个常见的例子：</p>\n<p>网站通过PHP获取用户信息：</p>\n<figure class=\"highlight php\"><figcaption><span>php</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$username = $_GET[<span class=\"string\">&#x27;username&#x27;</span>];</span><br><span class=\"line\">$query = <span class=\"string\">&quot;SELECT * FROM users WHERE username = &#x27;$username&#x27;&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>攻击者控制通过 GET 和 POST 发送的查询（或者例如 UA 的一些其他查询）。一般情况下，你希望查询户名为「 terry 」的用户产生的 SQL 语句如下：</p>\n<figure class=\"highlight sql\"><figcaption><span>mysql</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"keyword\">users</span> <span class=\"keyword\">WHERE</span> username = <span class=\"string\">&#x27;peter&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果客户端上送特殊的参数，如： 击者发送了特定的用户名参数，例如：<code>&#39; OR &#39;1&#39;=&#39;1</code> ，那么拼接的SQL如下：</p>\n<figure class=\"highlight sql\"><figcaption><span>mysql</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"keyword\">users</span> <span class=\"keyword\">WHERE</span> username = <span class=\"string\">&#x27;terry&#x27;</span> <span class=\"keyword\">OR</span> <span class=\"string\">&#x27;1&#x27;</span> = <span class=\"string\">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>所以这里建议使用mysql的预处理功能，能够防范SQL注入风险</p>\n<ul>\n<li>XSS 跨站脚本攻击</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">?php</span></span></span><br><span class=\"line\"><span class=\"tag\">$<span class=\"attr\">searchQuery</span> = <span class=\"string\">$_GET[</span>&#x27;<span class=\"attr\">q</span>&#x27;];</span></span><br><span class=\"line\"><span class=\"tag\">/* <span class=\"attr\">some</span> <span class=\"attr\">search</span> <span class=\"attr\">magic</span> <span class=\"attr\">here</span> */</span></span><br><span class=\"line\"><span class=\"tag\">?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>You searched for: <span class=\"tag\">&lt;<span class=\"name\">?php</span> <span class=\"attr\">echo</span> $<span class=\"attr\">searchQuery</span>; ?&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>We found: Absolutely nothing because this is a demo<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>因为我们把用户的内容直接打印出来，不经过任何过滤，非法用户可以拼接 URL：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">search.php?q=%3Cscript%3Ealert(1)%3B%3C%2Fscript%3E</span><br></pre></td></tr></table></figure>\n\n<p>PHP 渲染出来的内容如下，可以看到 Javascript 代码会被直接执行：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>You searched for: <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>alert(1);<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>We found: Absolutely nothing because this is a demo<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>JavaScript 可以完成如下工作：</p>\n<ul>\n<li>偷走你用户浏览器里的 Cookie；</li>\n<li>通过浏览器的记住密码功能获取到你的站点登录账号和密码；</li>\n<li>盗取用户的机密信息；</li>\n<li>你的用户在站点上能做到的事情，有了 JS 权限执行权限就都能做，也就是说 A 用户可以模拟成为任何用户；</li>\n<li>在你的网页中嵌入恶意代码</li>\n</ul>\n<p>如果防止此类问题，PHP可以使用函数 <code>htmlentities</code> 处理：</p>\n<figure class=\"highlight php\"><figcaption><span>php</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$searchQuery = htmlentities($searchQuery, ENT_QUOTES);</span><br></pre></td></tr></table></figure>\n\n<p>另外必须使用 Cookie 时，如果无需 JS 读取的话，请必须设置为 “HTTP ONLY”。这个设置可以令 JavaScript 无法读取 PHP 端种的 Cookie。</p>\n<ul>\n<li>XSRF/CSRF</li>\n</ul>\n<p>CSRF 是跨站请求伪造的缩写，它是攻击者通过一些技术手段欺骗用户去访问曾经认证过的网站并运行一些操作。</p>\n<figure class=\"highlight php\"><figcaption><span>php</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">//delete-account.php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$confirm = $_GET[<span class=\"string\">&#x27;confirm&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>($confirm === <span class=\"string\">&#x27;yes&#x27;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//goodbye</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>攻击者可以在他的站点上构建一个触发这个 URL 的表单（同样适用于 POST 的表单），或者将 URL 加载为图片诱惑用户点击：</p>\n<figure class=\"highlight html\"><figcaption><span>html</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://example.com/delete-account.php?confirm=yes&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>LFI 本地文件包含攻击</li>\n</ul>\n<p>LFI （本地文件包含） 是一个用户未经验证从磁盘读取文件的漏洞。<br>我经常遇到编程不规范的路由代码示例，它们不验证过滤用户的输入。我们用以下文件为例，将它要渲染的模板文件用 GET 请求加载。</p>\n<figure class=\"highlight php\"><figcaption><span>php</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">  $page = $_GET[<span class=\"string\">&#x27;page&#x27;</span>];</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!$page) &#123;</span><br><span class=\"line\">    $page = <span class=\"string\">&#x27;main.php&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">include</span>($page);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>由于 Include 可以加载任何文件，不仅仅是PHP，攻击者可以将系统上的任何文件作为包含目标传递。</p>\n<figure class=\"highlight html\"><figcaption><span>html</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index.php?page=../../etc/passwd</span><br></pre></td></tr></table></figure>\n<p>要防御此类攻击，你必须仔细考虑允许用户输入的类型，并删除可能有害的字符，如输入字符中的“.” “/” “\\”。<br>如果你真的想使用像这样的路由系统（我不建议以任何方式），你可以自动附加 PHP 扩展，删除任何非 [a-zA-Z0-9-_] 的字符，并指定从专用的模板文件夹中加载，以免被包含任何非模板文件。<br>我在不同的开发文档中，多次看到造成此类漏洞的 PHP 代码。从一开始就要有清晰的设计思路，允许所需要包含的文件类型，并删除掉多余的内容。你还可以构造要读取文件的绝对路径，并验证文件是否存在来作为保护，而不是任何位置都给予读取。</p>\n<ul>\n<li>不充分的密码哈希<br>现在单纯使用md5、sha1算法是不安全的，如果需要加密客户密码，需要使用新版本的函数 <code>password_hash</code> 和 <code>password_verify</code></li>\n</ul>\n<p>新版的 PHP 中也自带了安全的密码哈希函数 password_hash ，此函数已经包含了加盐处理。对应的密码验证函数为 password_verify 用来检测密码是否正确。password_verify 还可有效防止 时序攻击.</p>\n<p>使用例子：</p>\n<figure class=\"highlight php\"><figcaption><span>php</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//user signup</span></span><br><span class=\"line\">$password = $_POST[<span class=\"string\">&#x27;password&#x27;</span>];</span><br><span class=\"line\">$hashedPassword = password_hash($password, PASSWORD_DEFAULT);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//login</span></span><br><span class=\"line\">$password = $_POST[<span class=\"string\">&#x27;password&#x27;</span>];</span><br><span class=\"line\">$hash = <span class=\"string\">&#x27;1234&#x27;</span>; <span class=\"comment\">//load this value from your db</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(password_verify($password, $hash)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;Password is valid!&#x27;</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;Invalid password.&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>中间人攻击</li>\n</ul>\n<p>MITM （中间人） 攻击不是针对服务器直接攻击，而是针对用户进行，攻击者作为中间人欺骗服务器他是用户<br>欺骗用户他是服务器，从而来拦截用户与网站的流量，并从中注入恶意内容或者读取私密信息，通常发生在公共 WiFi 网络中<br>也有可能发生在其他流量通过的地方，例如ISP运营商。对此的唯一防御是使用 HTTPS，使用 HTTPS 可以将你的连接加密<br>并且无法读取或者篡改流量。你可以从 Let’s Encrypt 获取免费的 SSL 证书，或从其他供应商处购买<br>这里不详细介绍如何正确配置 WEB 服务器，因为这与应用程序安全性无关，且在很大程度上取决于你的设置。<br>你还可以采取一些措施使 HTTPS 更安全，在 WEB 服务器配置加上 Strict-Transport-Security 标示头<br>此头部信息告诉浏览器，你的网站始终通过 HTTPS 访问，如果未通过 HTTPS 将返回错误报告提示浏览器不应显示该页面。<br>然而，这里有个明显的问题，如果浏览器之前从未访问过你的网站，则无法知道你使用此标示头，这时候就需要用到 Hstspreload。</p>\n<ul>\n<li>命令注入</li>\n</ul>\n<p>这可能是服务器遇到的最严重的攻击，命令注入的目标是欺骗服务器执行任意 Shell 命令</p>\n<p>你如果使用 shell_exec 或是 exec 函数。让我们做一个小例子，允许用户简单的从服务器 Ping 不同的主机。</p>\n<figure class=\"highlight php\"><figcaption><span>php</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$targetIp = $_GET[<span class=\"string\">&#x27;ip&#x27;</span>];</span><br><span class=\"line\">$output = shell_exec(<span class=\"string\">&quot;ping -c 5 $targetIp&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>输出将包括对目标主机 Ping 5次。除非采用 sh 命令执行 Shell 脚本，否则攻击者可以执行想要的任何操作。</p>\n<figure class=\"highlight php\"><figcaption><span>php</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping.php?ip=<span class=\"number\">8.8</span><span class=\"number\">.8</span><span class=\"number\">.8</span>;ls -l /etc</span><br></pre></td></tr></table></figure>\n\n<p>Shell 将执行 Ping 和由攻击者拼接的第二个命令，这显然是非常危险的。<br><code>escapeshellarg</code> 转义用户的输入并将其封装成单引号。</p>\n<figure class=\"highlight php\"><figcaption><span>php</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$targetIp = escapeshellarg($_GET[<span class=\"string\">&#x27;ip&#x27;</span>]);</span><br><span class=\"line\">$output = shell_exec(<span class=\"string\">&quot;ping -c 5 $targetIp&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>XXE</li>\n</ul>\n<p>XXE （XML 外部实体） 是一种应用程序使用配置不正确的 XML 解析器解析外部 XML 时，导致的本地文件包含攻击，甚至可以远程代码执行。</p>\n<p>XML 有一个鲜为人知的特性，它允许文档作者将远程和本地文件作为实体包含在其 XML 文件中。</p>\n<figure class=\"highlight xml\"><figcaption><span>xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span></span><br><span class=\"line\"> <span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [</span></span><br><span class=\"line\"><span class=\"meta\">   <span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span> &gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">   <span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">passwd</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///etc/passwd&quot;</span> &gt;</span>]&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">foo</span>&gt;</span><span class=\"symbol\">&amp;passwd;</span><span class=\"tag\">&lt;/<span class=\"name\">foo</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果你使用 libxml 可以调用 libxml_disable_entity_loader 来保护自己免受此类攻击。使用前请仔细检查 XML 库的默认配置，以确保配置成功。</p>\n"},{"title":"研究Canal同步MySQL","date":"2020-08-02T12:22:27.000Z","description":"canal同步中间件","_content":"\n### 什么是Canal？\nCanal是基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费，我们可以用canal作为同步中间件，进行数据到数据仓库(doris|hive)等的落地\n\n### 工作原理\nCanal是基于mysql的binlog二进制日志来进行的数据处理，可以做到数据的绝对落地，只要保证高可用，数据肯定是最终一致性\nCanal 模拟 MySQL slave 的交互协议，伪装自己为 MySQL slave ，向 MySQL master 发送dump 协议\nMySQL master 收到 dump 请求，开始推送 binary log 给 slave (即 canal )\ncanal 解析 binary log 对象(原始为 byte 流)\n\n### 部署示例\n\n+ 环境准备\n\n```shell script\n[mysqld]\nlog-bin=mysql-bin # 开启 binlog\nbinlog-format=ROW # 选择 ROW 模式\nserver_id=1       # 配置 MySQL replication 需要定义，不要和 canal 的 slaveId 重复\n```\n\n+ 设置授权账号，用作 `Canal` 的同步账号：\n\n```shell script\nCREATE USER canal IDENTIFIED BY 'canal';  \nGRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'canal'@'%';\n--- GRANT ALL PRIVILEGES ON *.* TO 'canal'@'%' ;\nFLUSH PRIVILEGES;\n```\n\n+ 下载 `Canal`，或者通过如下的地址下载\n\n```html\nhttps://github.com/alibaba/canal/releases/download/canal-1.1.4/canal.deployer-1.1.4.tar.gz\n```\n\n+ 解压和更新配置\n\n```shell script\nvi conf/example/instance.properties\n```\n\n```shell script\n## mysql serverId\ncanal.instance.mysql.slaveId = 1234             # 这个id必须不同于 mysql server_id\n#position info，需要改成自己的数据库信息\ncanal.instance.master.address = 127.0.0.1:3306  # 需要同步的mysql的ip和端口\ncanal.instance.master.journal.name =            # binlog 文件名 通过 show master status 得到\ncanal.instance.master.position =                # binlog 位置  通过 show master status 得到\n#username/password，需要改成自己的数据库信息\ncanal.instance.dbUsername = canal               # mysql授权的同步账号\ncanal.instance.dbPassword = canal               # mysql授权的同步密码\ncanal.instance.defaultDatabaseName =            # 登陆的数据库名\ncanal.instance.connectionCharset = UTF-8\n#table regex\ncanal.instance.filter.regex = .\\*\\\\\\\\..\\*       # 所有的表\n```\n\n+ 启动canal\n\n```shell script\nsh bin/startup.sh\n```\n\n重启：\n\n```shell script\nsh bin/restart.sh\n```\n\n+ 错误日志\n\n如果存在错误，那么可以查看日志： `logs/example/example.log`\n\n```shell script\n2020-08-02 20:06:27.854 [main] WARN  c.a.o.canal.parse.inbound.mysql.dbsync.LogEventConvert - --> init table filter : ^.*\\..*$\n2020-08-02 20:06:27.855 [main] INFO  c.a.otter.canal.instance.core.AbstractCanalInstance - start successful....\n2020-08-02 20:06:27.870 [destination = example , address = /19.118.184.34:33006 , EventParser] WARN  c.a.o.c.p.inbound.mysql.rds.RdsBinlogEventParserProxy - ---> begin to find start position, it will be long time for reset or first position\n2020-08-02 20:06:27.989 [destination = example , address = /19.118.184.34:33006 , EventParser] WARN  c.a.o.c.p.inbound.mysql.rds.RdsBinlogEventParserProxy - prepare to find start position mysql-bin.000003:291:1596366589000\n2020-08-02 20:06:28.024 [destination = example , address = /19.118.184.34:33006 , EventParser] WARN  c.a.o.c.p.inbound.mysql.rds.RdsBinlogEventParserProxy - ---> find start position successfully, EntryPosition[included=false,journalName=mysql-bin.000003,position=291,serverId=1,gtid=,timestamp=1596366589000] cost : 145ms , the next step is binlog dump\n```\n看到上面的输出就证明成功了，如果有错误，那么对症下药即可：\n\n+ 客户端的同步代码，这边以 `go` 作为客户端语言作为演示\n\n```go go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"time\"\n\n\t\"github.com/golang/protobuf/proto\"\n\t\"github.com/withlin/canal-go/client\"\n\tprotocol \"github.com/withlin/canal-go/protocol\"\n)\n\nfunc main() {\n\n\t// 192.168.199.17 替换成你的canal server的地址\n\t// example 替换成-e canal.destinations=example 你自己定义的名字\n\tconnector := client.NewSimpleCanalConnector(\n\t\t\"127.0.0.1\", 11111,\n\t\t\"\", \"\",\n\t\t\"example\", 60000, 60*60*1000 )\n\terr := connector.Connect()\n\tif err != nil {\n\t\tlog.Println(err)\n\t\tos.Exit(1)\n\t}\n\n\t// https://github.com/alibaba/canal/wiki/AdminGuide\n\t//mysql 数据解析关注的表，Perl正则表达式.\n\t//\n\t//多个正则之间以逗号(,)分隔，转义符需要双斜杠(\\\\)\n\t//\n\t//常见例子：\n\t//\n\t//  1.  所有表：.*   or  .*\\\\..*\n\t//\t2.  canal schema下所有表： canal\\\\..*\n\t//\t3.  canal下的以canal打头的表：canal\\\\.canal.*\n\t//\t4.  canal schema下的一张表：canal\\\\.test1\n\t//  5.  多个规则组合使用：canal\\\\..*,mysql.test1,mysql.test2 (逗号分隔)\n\n\terr = connector.Subscribe(\".*\\\\..*\")\n\tif err != nil {\n\t\tlog.Println(err)\n\t\tos.Exit(1)\n\t}\n\n\tfor {\n\n\t\tmessage, err := connector.Get(100, nil, nil)\n\t\tif err != nil {\n\t\t\tlog.Println(err)\n\t\t\tos.Exit(1)\n\t\t}\n\t\tbatchId := message.Id\n\t\tif batchId == -1 || len(message.Entries) <= 0 {\n\t\t\ttime.Sleep(300 * time.Millisecond)\n\t\t\t// fmt.Println(\"===没有数据了===\")\n\t\t\tcontinue\n\t\t}\n\n\t\tprintEntry(message.Entries)\n\n\t}\n}\n\nfunc printEntry(entrys []protocol.Entry) {\n\n\tfor _, entry := range entrys {\n\t\tif entry.GetEntryType() == protocol.EntryType_TRANSACTIONBEGIN || entry.GetEntryType() == protocol.EntryType_TRANSACTIONEND {\n\t\t\tcontinue\n\t\t}\n\t\trowChange := new(protocol.RowChange)\n\n\t\terr := proto.Unmarshal(entry.GetStoreValue(), rowChange)\n\t\tcheckError(err)\n\t\tif rowChange != nil {\n\t\t\teventType := rowChange.GetEventType()\n\t\t\theader := entry.GetHeader()\n\t\t\tfmt.Println(fmt.Sprintf(\"================> binlog[%s : %d],name[%s,%s], eventType: %s\", header.GetLogfileName(), header.GetLogfileOffset(), header.GetSchemaName(), header.GetTableName(), header.GetEventType()))\n\n\t\t\tfor _, rowData := range rowChange.GetRowDatas() {\n\t\t\t\tif eventType == protocol.EventType_DELETE {\n\t\t\t\t\tprintColumn(rowData.GetBeforeColumns())\n\t\t\t\t} else if eventType == protocol.EventType_INSERT {\n\t\t\t\t\tprintColumn(rowData.GetAfterColumns())\n\t\t\t\t} else {\n\t\t\t\t\tfmt.Println(\"-------> before\")\n\t\t\t\t\tprintColumn(rowData.GetBeforeColumns())\n\t\t\t\t\tfmt.Println(\"-------> after\")\n\t\t\t\t\tprintColumn(rowData.GetAfterColumns())\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc printColumn(columns []*protocol.Column) {\n\tfor _, col := range columns {\n\t\tfmt.Println(fmt.Sprintf(\"%s : %s  update= %t\", col.GetName(), col.GetValue(), col.GetUpdated()))\n\t}\n}\n\nfunc checkError(err error) {\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Fatal error: %s\", err.Error())\n\t\tos.Exit(1)\n\t}\n}\n```\n\n输出如下：\n\n```shell script\n================> binlog[mysql-bin.000003 : 5006],name[blog,cs_comments], eventType: UPDATE\n-------> before\ncoid : 5  update= false\ncid : 89  update= false\ncreated : 1566226589  update= false\nauthor : 不拍片  update= false\nauthorId : 1  update= false\nownerId : 1  update= false\nmail : xeapplee@gmail.com  update= false\nurl : https://www.supjos.cn  update= false\nip : 14.28.4.208  update= false\nagent : Mozilla/5.0 (iPhone; CPU iPhone OS 12_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.1.2 Mobile/15E148 Safari/604.1  update= false\ntext : 只是想丰富一下PHP的原生功能而已，自己动手丰衣足食  update= false\ntype : comment  update= false\nstatus : approved  update= false\nparent : 4  update= false\ngravatar :   update= false\n-------> after\ncoid : 5  update= false\ncid : 89  update= false\ncreated : 1566226589  update= false\nauthor : 不拍片  update= false\nauthorId : 0  update= true\nownerId : 1  update= false\nmail : xeapplee@gmail.com  update= false\nurl : https://www.supjos.cn  update= false\nip : 14.28.4.208  update= false\nagent : Mozilla/5.0 (iPhone; CPU iPhone OS 12_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.1.2 Mobile/15E148 Safari/604.1  update= false\ntext : 只是想丰富一下PHP的原生功能而已，自己动手丰衣足食  update= false\ntype : comment  update= false\nstatus : approved  update= false\nparent : 4  update= false\ngravatar :   update= false\n================> binlog[mysql-bin.000003 : 5826],name[test_user,], eventType: QUERY\n================> binlog[mysql-bin.000003 : 6062],name[test_user,user_test], eventType: CREATE\n================> binlog[mysql-bin.000003 : 6540],name[test_user,user_test], eventType: INSERT\nid : 1  update= true\nname : hello  update= true\n```\n\n可以看到数据同步完整成功了\n","source":"_posts/研究Canal同步MySQL.md","raw":"---\ntitle: 研究Canal同步MySQL\ndate: 2020-08-02 20:22:27\ntags:\n- canal\n- binlog\n- mysql\n- 同步中间件\ncategories:\n- tech\ndescription: canal同步中间件\n---\n\n### 什么是Canal？\nCanal是基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费，我们可以用canal作为同步中间件，进行数据到数据仓库(doris|hive)等的落地\n\n### 工作原理\nCanal是基于mysql的binlog二进制日志来进行的数据处理，可以做到数据的绝对落地，只要保证高可用，数据肯定是最终一致性\nCanal 模拟 MySQL slave 的交互协议，伪装自己为 MySQL slave ，向 MySQL master 发送dump 协议\nMySQL master 收到 dump 请求，开始推送 binary log 给 slave (即 canal )\ncanal 解析 binary log 对象(原始为 byte 流)\n\n### 部署示例\n\n+ 环境准备\n\n```shell script\n[mysqld]\nlog-bin=mysql-bin # 开启 binlog\nbinlog-format=ROW # 选择 ROW 模式\nserver_id=1       # 配置 MySQL replication 需要定义，不要和 canal 的 slaveId 重复\n```\n\n+ 设置授权账号，用作 `Canal` 的同步账号：\n\n```shell script\nCREATE USER canal IDENTIFIED BY 'canal';  \nGRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'canal'@'%';\n--- GRANT ALL PRIVILEGES ON *.* TO 'canal'@'%' ;\nFLUSH PRIVILEGES;\n```\n\n+ 下载 `Canal`，或者通过如下的地址下载\n\n```html\nhttps://github.com/alibaba/canal/releases/download/canal-1.1.4/canal.deployer-1.1.4.tar.gz\n```\n\n+ 解压和更新配置\n\n```shell script\nvi conf/example/instance.properties\n```\n\n```shell script\n## mysql serverId\ncanal.instance.mysql.slaveId = 1234             # 这个id必须不同于 mysql server_id\n#position info，需要改成自己的数据库信息\ncanal.instance.master.address = 127.0.0.1:3306  # 需要同步的mysql的ip和端口\ncanal.instance.master.journal.name =            # binlog 文件名 通过 show master status 得到\ncanal.instance.master.position =                # binlog 位置  通过 show master status 得到\n#username/password，需要改成自己的数据库信息\ncanal.instance.dbUsername = canal               # mysql授权的同步账号\ncanal.instance.dbPassword = canal               # mysql授权的同步密码\ncanal.instance.defaultDatabaseName =            # 登陆的数据库名\ncanal.instance.connectionCharset = UTF-8\n#table regex\ncanal.instance.filter.regex = .\\*\\\\\\\\..\\*       # 所有的表\n```\n\n+ 启动canal\n\n```shell script\nsh bin/startup.sh\n```\n\n重启：\n\n```shell script\nsh bin/restart.sh\n```\n\n+ 错误日志\n\n如果存在错误，那么可以查看日志： `logs/example/example.log`\n\n```shell script\n2020-08-02 20:06:27.854 [main] WARN  c.a.o.canal.parse.inbound.mysql.dbsync.LogEventConvert - --> init table filter : ^.*\\..*$\n2020-08-02 20:06:27.855 [main] INFO  c.a.otter.canal.instance.core.AbstractCanalInstance - start successful....\n2020-08-02 20:06:27.870 [destination = example , address = /19.118.184.34:33006 , EventParser] WARN  c.a.o.c.p.inbound.mysql.rds.RdsBinlogEventParserProxy - ---> begin to find start position, it will be long time for reset or first position\n2020-08-02 20:06:27.989 [destination = example , address = /19.118.184.34:33006 , EventParser] WARN  c.a.o.c.p.inbound.mysql.rds.RdsBinlogEventParserProxy - prepare to find start position mysql-bin.000003:291:1596366589000\n2020-08-02 20:06:28.024 [destination = example , address = /19.118.184.34:33006 , EventParser] WARN  c.a.o.c.p.inbound.mysql.rds.RdsBinlogEventParserProxy - ---> find start position successfully, EntryPosition[included=false,journalName=mysql-bin.000003,position=291,serverId=1,gtid=,timestamp=1596366589000] cost : 145ms , the next step is binlog dump\n```\n看到上面的输出就证明成功了，如果有错误，那么对症下药即可：\n\n+ 客户端的同步代码，这边以 `go` 作为客户端语言作为演示\n\n```go go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"time\"\n\n\t\"github.com/golang/protobuf/proto\"\n\t\"github.com/withlin/canal-go/client\"\n\tprotocol \"github.com/withlin/canal-go/protocol\"\n)\n\nfunc main() {\n\n\t// 192.168.199.17 替换成你的canal server的地址\n\t// example 替换成-e canal.destinations=example 你自己定义的名字\n\tconnector := client.NewSimpleCanalConnector(\n\t\t\"127.0.0.1\", 11111,\n\t\t\"\", \"\",\n\t\t\"example\", 60000, 60*60*1000 )\n\terr := connector.Connect()\n\tif err != nil {\n\t\tlog.Println(err)\n\t\tos.Exit(1)\n\t}\n\n\t// https://github.com/alibaba/canal/wiki/AdminGuide\n\t//mysql 数据解析关注的表，Perl正则表达式.\n\t//\n\t//多个正则之间以逗号(,)分隔，转义符需要双斜杠(\\\\)\n\t//\n\t//常见例子：\n\t//\n\t//  1.  所有表：.*   or  .*\\\\..*\n\t//\t2.  canal schema下所有表： canal\\\\..*\n\t//\t3.  canal下的以canal打头的表：canal\\\\.canal.*\n\t//\t4.  canal schema下的一张表：canal\\\\.test1\n\t//  5.  多个规则组合使用：canal\\\\..*,mysql.test1,mysql.test2 (逗号分隔)\n\n\terr = connector.Subscribe(\".*\\\\..*\")\n\tif err != nil {\n\t\tlog.Println(err)\n\t\tos.Exit(1)\n\t}\n\n\tfor {\n\n\t\tmessage, err := connector.Get(100, nil, nil)\n\t\tif err != nil {\n\t\t\tlog.Println(err)\n\t\t\tos.Exit(1)\n\t\t}\n\t\tbatchId := message.Id\n\t\tif batchId == -1 || len(message.Entries) <= 0 {\n\t\t\ttime.Sleep(300 * time.Millisecond)\n\t\t\t// fmt.Println(\"===没有数据了===\")\n\t\t\tcontinue\n\t\t}\n\n\t\tprintEntry(message.Entries)\n\n\t}\n}\n\nfunc printEntry(entrys []protocol.Entry) {\n\n\tfor _, entry := range entrys {\n\t\tif entry.GetEntryType() == protocol.EntryType_TRANSACTIONBEGIN || entry.GetEntryType() == protocol.EntryType_TRANSACTIONEND {\n\t\t\tcontinue\n\t\t}\n\t\trowChange := new(protocol.RowChange)\n\n\t\terr := proto.Unmarshal(entry.GetStoreValue(), rowChange)\n\t\tcheckError(err)\n\t\tif rowChange != nil {\n\t\t\teventType := rowChange.GetEventType()\n\t\t\theader := entry.GetHeader()\n\t\t\tfmt.Println(fmt.Sprintf(\"================> binlog[%s : %d],name[%s,%s], eventType: %s\", header.GetLogfileName(), header.GetLogfileOffset(), header.GetSchemaName(), header.GetTableName(), header.GetEventType()))\n\n\t\t\tfor _, rowData := range rowChange.GetRowDatas() {\n\t\t\t\tif eventType == protocol.EventType_DELETE {\n\t\t\t\t\tprintColumn(rowData.GetBeforeColumns())\n\t\t\t\t} else if eventType == protocol.EventType_INSERT {\n\t\t\t\t\tprintColumn(rowData.GetAfterColumns())\n\t\t\t\t} else {\n\t\t\t\t\tfmt.Println(\"-------> before\")\n\t\t\t\t\tprintColumn(rowData.GetBeforeColumns())\n\t\t\t\t\tfmt.Println(\"-------> after\")\n\t\t\t\t\tprintColumn(rowData.GetAfterColumns())\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc printColumn(columns []*protocol.Column) {\n\tfor _, col := range columns {\n\t\tfmt.Println(fmt.Sprintf(\"%s : %s  update= %t\", col.GetName(), col.GetValue(), col.GetUpdated()))\n\t}\n}\n\nfunc checkError(err error) {\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Fatal error: %s\", err.Error())\n\t\tos.Exit(1)\n\t}\n}\n```\n\n输出如下：\n\n```shell script\n================> binlog[mysql-bin.000003 : 5006],name[blog,cs_comments], eventType: UPDATE\n-------> before\ncoid : 5  update= false\ncid : 89  update= false\ncreated : 1566226589  update= false\nauthor : 不拍片  update= false\nauthorId : 1  update= false\nownerId : 1  update= false\nmail : xeapplee@gmail.com  update= false\nurl : https://www.supjos.cn  update= false\nip : 14.28.4.208  update= false\nagent : Mozilla/5.0 (iPhone; CPU iPhone OS 12_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.1.2 Mobile/15E148 Safari/604.1  update= false\ntext : 只是想丰富一下PHP的原生功能而已，自己动手丰衣足食  update= false\ntype : comment  update= false\nstatus : approved  update= false\nparent : 4  update= false\ngravatar :   update= false\n-------> after\ncoid : 5  update= false\ncid : 89  update= false\ncreated : 1566226589  update= false\nauthor : 不拍片  update= false\nauthorId : 0  update= true\nownerId : 1  update= false\nmail : xeapplee@gmail.com  update= false\nurl : https://www.supjos.cn  update= false\nip : 14.28.4.208  update= false\nagent : Mozilla/5.0 (iPhone; CPU iPhone OS 12_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.1.2 Mobile/15E148 Safari/604.1  update= false\ntext : 只是想丰富一下PHP的原生功能而已，自己动手丰衣足食  update= false\ntype : comment  update= false\nstatus : approved  update= false\nparent : 4  update= false\ngravatar :   update= false\n================> binlog[mysql-bin.000003 : 5826],name[test_user,], eventType: QUERY\n================> binlog[mysql-bin.000003 : 6062],name[test_user,user_test], eventType: CREATE\n================> binlog[mysql-bin.000003 : 6540],name[test_user,user_test], eventType: INSERT\nid : 1  update= true\nname : hello  update= true\n```\n\n可以看到数据同步完整成功了\n","slug":"研究Canal同步MySQL","published":1,"updated":"2020-08-02T12:36:38.308Z","_id":"ckdd2hi160000gddodx7hgv5v","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"什么是Canal？\"><a href=\"#什么是Canal？\" class=\"headerlink\" title=\"什么是Canal？\"></a>什么是Canal？</h3><p>Canal是基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费，我们可以用canal作为同步中间件，进行数据到数据仓库(doris|hive)等的落地</p>\n<h3 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h3><p>Canal是基于mysql的binlog二进制日志来进行的数据处理，可以做到数据的绝对落地，只要保证高可用，数据肯定是最终一致性<br>Canal 模拟 MySQL slave 的交互协议，伪装自己为 MySQL slave ，向 MySQL master 发送dump 协议<br>MySQL master 收到 dump 请求，开始推送 binary log 给 slave (即 canal )<br>canal 解析 binary log 对象(原始为 byte 流)</p>\n<h3 id=\"部署示例\"><a href=\"#部署示例\" class=\"headerlink\" title=\"部署示例\"></a>部署示例</h3><ul>\n<li>环境准备</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">log-bin=mysql-bin # 开启 binlog</span><br><span class=\"line\">binlog-format=ROW # 选择 ROW 模式</span><br><span class=\"line\">server_id=1       # 配置 MySQL replication 需要定义，不要和 canal 的 slaveId 重复</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>设置授权账号，用作 <code>Canal</code> 的同步账号：</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE USER canal IDENTIFIED BY &#x27;canal&#x27;;  </span><br><span class=\"line\">GRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO &#x27;canal&#x27;@&#x27;%&#x27;;</span><br><span class=\"line\">--- GRANT ALL PRIVILEGES ON *.* TO &#x27;canal&#x27;@&#x27;%&#x27; ;</span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>下载 <code>Canal</code>，或者通过如下的地址下载</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/alibaba/canal/releases/download/canal-1.1.4/canal.deployer-1.1.4.tar.gz</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>解压和更新配置</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi conf/example/instance.properties</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># mysql serverId</span></span></span><br><span class=\"line\">canal.instance.mysql.slaveId = 1234             # 这个id必须不同于 mysql server_id</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">position info，需要改成自己的数据库信息</span></span><br><span class=\"line\">canal.instance.master.address = 127.0.0.1:3306  # 需要同步的mysql的ip和端口</span><br><span class=\"line\">canal.instance.master.journal.name =            # binlog 文件名 通过 show master status 得到</span><br><span class=\"line\">canal.instance.master.position =                # binlog 位置  通过 show master status 得到</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">username/password，需要改成自己的数据库信息</span></span><br><span class=\"line\">canal.instance.dbUsername = canal               # mysql授权的同步账号</span><br><span class=\"line\">canal.instance.dbPassword = canal               # mysql授权的同步密码</span><br><span class=\"line\">canal.instance.defaultDatabaseName =            # 登陆的数据库名</span><br><span class=\"line\">canal.instance.connectionCharset = UTF-8</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">table regex</span></span><br><span class=\"line\">canal.instance.filter.regex = .\\*\\\\\\\\..\\*       # 所有的表</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动canal</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh bin/startup.sh</span><br></pre></td></tr></table></figure>\n\n<p>重启：</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh bin/restart.sh</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>错误日志</li>\n</ul>\n<p>如果存在错误，那么可以查看日志： <code>logs/example/example.log</code></p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2020-08-02 20:06:27.854 [main] WARN  c.a.o.canal.parse.inbound.mysql.dbsync.LogEventConvert - --&gt; init table filter : ^.*\\..*$</span><br><span class=\"line\">2020-08-02 20:06:27.855 [main] INFO  c.a.otter.canal.instance.core.AbstractCanalInstance - start successful....</span><br><span class=\"line\">2020-08-02 20:06:27.870 [destination = example , address = /19.118.184.34:33006 , EventParser] WARN  c.a.o.c.p.inbound.mysql.rds.RdsBinlogEventParserProxy - ---&gt; begin to find start position, it will be long time for reset or first position</span><br><span class=\"line\">2020-08-02 20:06:27.989 [destination = example , address = /19.118.184.34:33006 , EventParser] WARN  c.a.o.c.p.inbound.mysql.rds.RdsBinlogEventParserProxy - prepare to find start position mysql-bin.000003:291:1596366589000</span><br><span class=\"line\">2020-08-02 20:06:28.024 [destination = example , address = /19.118.184.34:33006 , EventParser] WARN  c.a.o.c.p.inbound.mysql.rds.RdsBinlogEventParserProxy - ---&gt; find start position successfully, EntryPosition[included=false,journalName=mysql-bin.000003,position=291,serverId=1,gtid=,timestamp=1596366589000] cost : 145ms , the next step is binlog dump</span><br></pre></td></tr></table></figure>\n<p>看到上面的输出就证明成功了，如果有错误，那么对症下药即可：</p>\n<ul>\n<li>客户端的同步代码，这边以 <code>go</code> 作为客户端语言作为演示</li>\n</ul>\n<figure class=\"highlight go\"><figcaption><span>go</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;github.com/golang/protobuf/proto&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;github.com/withlin/canal-go/client&quot;</span></span><br><span class=\"line\">    protocol <span class=\"string\">&quot;github.com/withlin/canal-go/protocol&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 192.168.199.17 替换成你的canal server的地址</span></span><br><span class=\"line\">    <span class=\"comment\">// example 替换成-e canal.destinations=example 你自己定义的名字</span></span><br><span class=\"line\">    connector := client.NewSimpleCanalConnector(</span><br><span class=\"line\">        <span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">11111</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;example&quot;</span>, <span class=\"number\">60000</span>, <span class=\"number\">60</span>*<span class=\"number\">60</span>*<span class=\"number\">1000</span> )</span><br><span class=\"line\">    err := connector.Connect()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Println(err)</span><br><span class=\"line\">        os.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// https://github.com/alibaba/canal/wiki/AdminGuide</span></span><br><span class=\"line\">    <span class=\"comment\">//mysql 数据解析关注的表，Perl正则表达式.</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">//多个正则之间以逗号(,)分隔，转义符需要双斜杠(\\\\)</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">//常见例子：</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">//  1.  所有表：.*   or  .*\\\\..*</span></span><br><span class=\"line\">    <span class=\"comment\">//    2.  canal schema下所有表： canal\\\\..*</span></span><br><span class=\"line\">    <span class=\"comment\">//    3.  canal下的以canal打头的表：canal\\\\.canal.*</span></span><br><span class=\"line\">    <span class=\"comment\">//    4.  canal schema下的一张表：canal\\\\.test1</span></span><br><span class=\"line\">    <span class=\"comment\">//  5.  多个规则组合使用：canal\\\\..*,mysql.test1,mysql.test2 (逗号分隔)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    err = connector.Subscribe(<span class=\"string\">&quot;.*\\\\..*&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Println(err)</span><br><span class=\"line\">        os.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        message, err := connector.Get(<span class=\"number\">100</span>, <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            log.Println(err)</span><br><span class=\"line\">            os.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        batchId := message.Id</span><br><span class=\"line\">        <span class=\"keyword\">if</span> batchId == <span class=\"number\">-1</span> || <span class=\"built_in\">len</span>(message.Entries) &lt;= <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">            time.Sleep(<span class=\"number\">300</span> * time.Millisecond)</span><br><span class=\"line\">            <span class=\"comment\">// fmt.Println(&quot;===没有数据了===&quot;)</span></span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        printEntry(message.Entries)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printEntry</span><span class=\"params\">(entrys []protocol.Entry)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, entry := <span class=\"keyword\">range</span> entrys &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> entry.GetEntryType() == protocol.EntryType_TRANSACTIONBEGIN || entry.GetEntryType() == protocol.EntryType_TRANSACTIONEND &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        rowChange := <span class=\"built_in\">new</span>(protocol.RowChange)</span><br><span class=\"line\"></span><br><span class=\"line\">        err := proto.Unmarshal(entry.GetStoreValue(), rowChange)</span><br><span class=\"line\">        checkError(err)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> rowChange != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            eventType := rowChange.GetEventType()</span><br><span class=\"line\">            header := entry.GetHeader()</span><br><span class=\"line\">            fmt.Println(fmt.Sprintf(<span class=\"string\">&quot;================&gt; binlog[%s : %d],name[%s,%s], eventType: %s&quot;</span>, header.GetLogfileName(), header.GetLogfileOffset(), header.GetSchemaName(), header.GetTableName(), header.GetEventType()))</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> _, rowData := <span class=\"keyword\">range</span> rowChange.GetRowDatas() &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> eventType == protocol.EventType_DELETE &#123;</span><br><span class=\"line\">                    printColumn(rowData.GetBeforeColumns())</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> eventType == protocol.EventType_INSERT &#123;</span><br><span class=\"line\">                    printColumn(rowData.GetAfterColumns())</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    fmt.Println(<span class=\"string\">&quot;-------&gt; before&quot;</span>)</span><br><span class=\"line\">                    printColumn(rowData.GetBeforeColumns())</span><br><span class=\"line\">                    fmt.Println(<span class=\"string\">&quot;-------&gt; after&quot;</span>)</span><br><span class=\"line\">                    printColumn(rowData.GetAfterColumns())</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printColumn</span><span class=\"params\">(columns []*protocol.Column)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, col := <span class=\"keyword\">range</span> columns &#123;</span><br><span class=\"line\">        fmt.Println(fmt.Sprintf(<span class=\"string\">&quot;%s : %s  update= %t&quot;</span>, col.GetName(), col.GetValue(), col.GetUpdated()))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">checkError</span><span class=\"params\">(err error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        fmt.Fprintf(os.Stderr, <span class=\"string\">&quot;Fatal error: %s&quot;</span>, err.Error())</span><br><span class=\"line\">        os.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出如下：</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">================&gt; binlog[mysql-bin.000003 : 5006],name[blog,cs_comments], eventType: UPDATE</span><br><span class=\"line\"><span class=\"meta\">-------&gt;</span><span class=\"bash\"> before</span></span><br><span class=\"line\">coid : 5  update= false</span><br><span class=\"line\">cid : 89  update= false</span><br><span class=\"line\">created : 1566226589  update= false</span><br><span class=\"line\">author : 不拍片  update= false</span><br><span class=\"line\">authorId : 1  update= false</span><br><span class=\"line\">ownerId : 1  update= false</span><br><span class=\"line\">mail : xeapplee@gmail.com  update= false</span><br><span class=\"line\">url : https://www.supjos.cn  update= false</span><br><span class=\"line\">ip : 14.28.4.208  update= false</span><br><span class=\"line\">agent : Mozilla/5.0 (iPhone; CPU iPhone OS 12_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.1.2 Mobile/15E148 Safari/604.1  update= false</span><br><span class=\"line\">text : 只是想丰富一下PHP的原生功能而已，自己动手丰衣足食  update= false</span><br><span class=\"line\">type : comment  update= false</span><br><span class=\"line\">status : approved  update= false</span><br><span class=\"line\">parent : 4  update= false</span><br><span class=\"line\">gravatar :   update= false</span><br><span class=\"line\"><span class=\"meta\">-------&gt;</span><span class=\"bash\"> after</span></span><br><span class=\"line\">coid : 5  update= false</span><br><span class=\"line\">cid : 89  update= false</span><br><span class=\"line\">created : 1566226589  update= false</span><br><span class=\"line\">author : 不拍片  update= false</span><br><span class=\"line\">authorId : 0  update= true</span><br><span class=\"line\">ownerId : 1  update= false</span><br><span class=\"line\">mail : xeapplee@gmail.com  update= false</span><br><span class=\"line\">url : https://www.supjos.cn  update= false</span><br><span class=\"line\">ip : 14.28.4.208  update= false</span><br><span class=\"line\">agent : Mozilla/5.0 (iPhone; CPU iPhone OS 12_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.1.2 Mobile/15E148 Safari/604.1  update= false</span><br><span class=\"line\">text : 只是想丰富一下PHP的原生功能而已，自己动手丰衣足食  update= false</span><br><span class=\"line\">type : comment  update= false</span><br><span class=\"line\">status : approved  update= false</span><br><span class=\"line\">parent : 4  update= false</span><br><span class=\"line\">gravatar :   update= false</span><br><span class=\"line\">================&gt; binlog[mysql-bin.000003 : 5826],name[test_user,], eventType: QUERY</span><br><span class=\"line\">================&gt; binlog[mysql-bin.000003 : 6062],name[test_user,user_test], eventType: CREATE</span><br><span class=\"line\">================&gt; binlog[mysql-bin.000003 : 6540],name[test_user,user_test], eventType: INSERT</span><br><span class=\"line\">id : 1  update= true</span><br><span class=\"line\">name : hello  update= true</span><br></pre></td></tr></table></figure>\n\n<p>可以看到数据同步完整成功了</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是Canal？\"><a href=\"#什么是Canal？\" class=\"headerlink\" title=\"什么是Canal？\"></a>什么是Canal？</h3><p>Canal是基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费，我们可以用canal作为同步中间件，进行数据到数据仓库(doris|hive)等的落地</p>\n<h3 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h3><p>Canal是基于mysql的binlog二进制日志来进行的数据处理，可以做到数据的绝对落地，只要保证高可用，数据肯定是最终一致性<br>Canal 模拟 MySQL slave 的交互协议，伪装自己为 MySQL slave ，向 MySQL master 发送dump 协议<br>MySQL master 收到 dump 请求，开始推送 binary log 给 slave (即 canal )<br>canal 解析 binary log 对象(原始为 byte 流)</p>\n<h3 id=\"部署示例\"><a href=\"#部署示例\" class=\"headerlink\" title=\"部署示例\"></a>部署示例</h3><ul>\n<li>环境准备</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">log-bin=mysql-bin # 开启 binlog</span><br><span class=\"line\">binlog-format=ROW # 选择 ROW 模式</span><br><span class=\"line\">server_id=1       # 配置 MySQL replication 需要定义，不要和 canal 的 slaveId 重复</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>设置授权账号，用作 <code>Canal</code> 的同步账号：</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE USER canal IDENTIFIED BY &#x27;canal&#x27;;  </span><br><span class=\"line\">GRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO &#x27;canal&#x27;@&#x27;%&#x27;;</span><br><span class=\"line\">--- GRANT ALL PRIVILEGES ON *.* TO &#x27;canal&#x27;@&#x27;%&#x27; ;</span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>下载 <code>Canal</code>，或者通过如下的地址下载</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/alibaba/canal/releases/download/canal-1.1.4/canal.deployer-1.1.4.tar.gz</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>解压和更新配置</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi conf/example/instance.properties</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># mysql serverId</span></span></span><br><span class=\"line\">canal.instance.mysql.slaveId = 1234             # 这个id必须不同于 mysql server_id</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">position info，需要改成自己的数据库信息</span></span><br><span class=\"line\">canal.instance.master.address = 127.0.0.1:3306  # 需要同步的mysql的ip和端口</span><br><span class=\"line\">canal.instance.master.journal.name =            # binlog 文件名 通过 show master status 得到</span><br><span class=\"line\">canal.instance.master.position =                # binlog 位置  通过 show master status 得到</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">username/password，需要改成自己的数据库信息</span></span><br><span class=\"line\">canal.instance.dbUsername = canal               # mysql授权的同步账号</span><br><span class=\"line\">canal.instance.dbPassword = canal               # mysql授权的同步密码</span><br><span class=\"line\">canal.instance.defaultDatabaseName =            # 登陆的数据库名</span><br><span class=\"line\">canal.instance.connectionCharset = UTF-8</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">table regex</span></span><br><span class=\"line\">canal.instance.filter.regex = .\\*\\\\\\\\..\\*       # 所有的表</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动canal</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh bin/startup.sh</span><br></pre></td></tr></table></figure>\n\n<p>重启：</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh bin/restart.sh</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>错误日志</li>\n</ul>\n<p>如果存在错误，那么可以查看日志： <code>logs/example/example.log</code></p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2020-08-02 20:06:27.854 [main] WARN  c.a.o.canal.parse.inbound.mysql.dbsync.LogEventConvert - --&gt; init table filter : ^.*\\..*$</span><br><span class=\"line\">2020-08-02 20:06:27.855 [main] INFO  c.a.otter.canal.instance.core.AbstractCanalInstance - start successful....</span><br><span class=\"line\">2020-08-02 20:06:27.870 [destination = example , address = /19.118.184.34:33006 , EventParser] WARN  c.a.o.c.p.inbound.mysql.rds.RdsBinlogEventParserProxy - ---&gt; begin to find start position, it will be long time for reset or first position</span><br><span class=\"line\">2020-08-02 20:06:27.989 [destination = example , address = /19.118.184.34:33006 , EventParser] WARN  c.a.o.c.p.inbound.mysql.rds.RdsBinlogEventParserProxy - prepare to find start position mysql-bin.000003:291:1596366589000</span><br><span class=\"line\">2020-08-02 20:06:28.024 [destination = example , address = /19.118.184.34:33006 , EventParser] WARN  c.a.o.c.p.inbound.mysql.rds.RdsBinlogEventParserProxy - ---&gt; find start position successfully, EntryPosition[included=false,journalName=mysql-bin.000003,position=291,serverId=1,gtid=,timestamp=1596366589000] cost : 145ms , the next step is binlog dump</span><br></pre></td></tr></table></figure>\n<p>看到上面的输出就证明成功了，如果有错误，那么对症下药即可：</p>\n<ul>\n<li>客户端的同步代码，这边以 <code>go</code> 作为客户端语言作为演示</li>\n</ul>\n<figure class=\"highlight go\"><figcaption><span>go</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;github.com/golang/protobuf/proto&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;github.com/withlin/canal-go/client&quot;</span></span><br><span class=\"line\">    protocol <span class=\"string\">&quot;github.com/withlin/canal-go/protocol&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 192.168.199.17 替换成你的canal server的地址</span></span><br><span class=\"line\">    <span class=\"comment\">// example 替换成-e canal.destinations=example 你自己定义的名字</span></span><br><span class=\"line\">    connector := client.NewSimpleCanalConnector(</span><br><span class=\"line\">        <span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">11111</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;example&quot;</span>, <span class=\"number\">60000</span>, <span class=\"number\">60</span>*<span class=\"number\">60</span>*<span class=\"number\">1000</span> )</span><br><span class=\"line\">    err := connector.Connect()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Println(err)</span><br><span class=\"line\">        os.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// https://github.com/alibaba/canal/wiki/AdminGuide</span></span><br><span class=\"line\">    <span class=\"comment\">//mysql 数据解析关注的表，Perl正则表达式.</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">//多个正则之间以逗号(,)分隔，转义符需要双斜杠(\\\\)</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">//常见例子：</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">//  1.  所有表：.*   or  .*\\\\..*</span></span><br><span class=\"line\">    <span class=\"comment\">//    2.  canal schema下所有表： canal\\\\..*</span></span><br><span class=\"line\">    <span class=\"comment\">//    3.  canal下的以canal打头的表：canal\\\\.canal.*</span></span><br><span class=\"line\">    <span class=\"comment\">//    4.  canal schema下的一张表：canal\\\\.test1</span></span><br><span class=\"line\">    <span class=\"comment\">//  5.  多个规则组合使用：canal\\\\..*,mysql.test1,mysql.test2 (逗号分隔)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    err = connector.Subscribe(<span class=\"string\">&quot;.*\\\\..*&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Println(err)</span><br><span class=\"line\">        os.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        message, err := connector.Get(<span class=\"number\">100</span>, <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            log.Println(err)</span><br><span class=\"line\">            os.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        batchId := message.Id</span><br><span class=\"line\">        <span class=\"keyword\">if</span> batchId == <span class=\"number\">-1</span> || <span class=\"built_in\">len</span>(message.Entries) &lt;= <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">            time.Sleep(<span class=\"number\">300</span> * time.Millisecond)</span><br><span class=\"line\">            <span class=\"comment\">// fmt.Println(&quot;===没有数据了===&quot;)</span></span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        printEntry(message.Entries)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printEntry</span><span class=\"params\">(entrys []protocol.Entry)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, entry := <span class=\"keyword\">range</span> entrys &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> entry.GetEntryType() == protocol.EntryType_TRANSACTIONBEGIN || entry.GetEntryType() == protocol.EntryType_TRANSACTIONEND &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        rowChange := <span class=\"built_in\">new</span>(protocol.RowChange)</span><br><span class=\"line\"></span><br><span class=\"line\">        err := proto.Unmarshal(entry.GetStoreValue(), rowChange)</span><br><span class=\"line\">        checkError(err)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> rowChange != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            eventType := rowChange.GetEventType()</span><br><span class=\"line\">            header := entry.GetHeader()</span><br><span class=\"line\">            fmt.Println(fmt.Sprintf(<span class=\"string\">&quot;================&gt; binlog[%s : %d],name[%s,%s], eventType: %s&quot;</span>, header.GetLogfileName(), header.GetLogfileOffset(), header.GetSchemaName(), header.GetTableName(), header.GetEventType()))</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> _, rowData := <span class=\"keyword\">range</span> rowChange.GetRowDatas() &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> eventType == protocol.EventType_DELETE &#123;</span><br><span class=\"line\">                    printColumn(rowData.GetBeforeColumns())</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> eventType == protocol.EventType_INSERT &#123;</span><br><span class=\"line\">                    printColumn(rowData.GetAfterColumns())</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    fmt.Println(<span class=\"string\">&quot;-------&gt; before&quot;</span>)</span><br><span class=\"line\">                    printColumn(rowData.GetBeforeColumns())</span><br><span class=\"line\">                    fmt.Println(<span class=\"string\">&quot;-------&gt; after&quot;</span>)</span><br><span class=\"line\">                    printColumn(rowData.GetAfterColumns())</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printColumn</span><span class=\"params\">(columns []*protocol.Column)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, col := <span class=\"keyword\">range</span> columns &#123;</span><br><span class=\"line\">        fmt.Println(fmt.Sprintf(<span class=\"string\">&quot;%s : %s  update= %t&quot;</span>, col.GetName(), col.GetValue(), col.GetUpdated()))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">checkError</span><span class=\"params\">(err error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        fmt.Fprintf(os.Stderr, <span class=\"string\">&quot;Fatal error: %s&quot;</span>, err.Error())</span><br><span class=\"line\">        os.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出如下：</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">================&gt; binlog[mysql-bin.000003 : 5006],name[blog,cs_comments], eventType: UPDATE</span><br><span class=\"line\"><span class=\"meta\">-------&gt;</span><span class=\"bash\"> before</span></span><br><span class=\"line\">coid : 5  update= false</span><br><span class=\"line\">cid : 89  update= false</span><br><span class=\"line\">created : 1566226589  update= false</span><br><span class=\"line\">author : 不拍片  update= false</span><br><span class=\"line\">authorId : 1  update= false</span><br><span class=\"line\">ownerId : 1  update= false</span><br><span class=\"line\">mail : xeapplee@gmail.com  update= false</span><br><span class=\"line\">url : https://www.supjos.cn  update= false</span><br><span class=\"line\">ip : 14.28.4.208  update= false</span><br><span class=\"line\">agent : Mozilla/5.0 (iPhone; CPU iPhone OS 12_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.1.2 Mobile/15E148 Safari/604.1  update= false</span><br><span class=\"line\">text : 只是想丰富一下PHP的原生功能而已，自己动手丰衣足食  update= false</span><br><span class=\"line\">type : comment  update= false</span><br><span class=\"line\">status : approved  update= false</span><br><span class=\"line\">parent : 4  update= false</span><br><span class=\"line\">gravatar :   update= false</span><br><span class=\"line\"><span class=\"meta\">-------&gt;</span><span class=\"bash\"> after</span></span><br><span class=\"line\">coid : 5  update= false</span><br><span class=\"line\">cid : 89  update= false</span><br><span class=\"line\">created : 1566226589  update= false</span><br><span class=\"line\">author : 不拍片  update= false</span><br><span class=\"line\">authorId : 0  update= true</span><br><span class=\"line\">ownerId : 1  update= false</span><br><span class=\"line\">mail : xeapplee@gmail.com  update= false</span><br><span class=\"line\">url : https://www.supjos.cn  update= false</span><br><span class=\"line\">ip : 14.28.4.208  update= false</span><br><span class=\"line\">agent : Mozilla/5.0 (iPhone; CPU iPhone OS 12_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.1.2 Mobile/15E148 Safari/604.1  update= false</span><br><span class=\"line\">text : 只是想丰富一下PHP的原生功能而已，自己动手丰衣足食  update= false</span><br><span class=\"line\">type : comment  update= false</span><br><span class=\"line\">status : approved  update= false</span><br><span class=\"line\">parent : 4  update= false</span><br><span class=\"line\">gravatar :   update= false</span><br><span class=\"line\">================&gt; binlog[mysql-bin.000003 : 5826],name[test_user,], eventType: QUERY</span><br><span class=\"line\">================&gt; binlog[mysql-bin.000003 : 6062],name[test_user,user_test], eventType: CREATE</span><br><span class=\"line\">================&gt; binlog[mysql-bin.000003 : 6540],name[test_user,user_test], eventType: INSERT</span><br><span class=\"line\">id : 1  update= true</span><br><span class=\"line\">name : hello  update= true</span><br></pre></td></tr></table></figure>\n\n<p>可以看到数据同步完整成功了</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckdccyasn00007udod6gm0pui","category_id":"ckdcbm2l6000119do7wxwa32d","_id":"ckdccyn08000083doa2ig9yn7"},{"post_id":"ckdcfla7p0000pndo0ow88op2","category_id":"ckdcbm2l6000119do7wxwa32d","_id":"ckdcfmj7q00005ddo105s0tyu"},{"post_id":"ckdcgs80t0000zldo2nev1gdz","category_id":"ckdcbm2l6000119do7wxwa32d","_id":"ckdcgsrsw0002zldo3qip9zys"},{"post_id":"ckdcokkvy0000b2do231w7zd4","category_id":"ckdcbm2l6000119do7wxwa32d","_id":"ckdcol5x30002b2do7qjf32a2"},{"post_id":"ckdd2hi160000gddodx7hgv5v","category_id":"ckdcbm2l6000119do7wxwa32d","_id":"ckdd2hi190001gddoags0hnme"}],"PostTag":[{"post_id":"ckdccyasn00007udod6gm0pui","tag_id":"ckdccz2hx00009zdo8wmw9vb7","_id":"ckdccz2hy00019zdohvq1cdk2"},{"post_id":"ckdccyasn00007udod6gm0pui","tag_id":"ckdccz45400029zdo5xciej50","_id":"ckdccz45500039zdofp83hzsm"},{"post_id":"ckdccyasn00007udod6gm0pui","tag_id":"ckdccz71x00049zdo7imhckmd","_id":"ckdccz71y00059zdo1c8hdlzz"},{"post_id":"ckdcfla7p0000pndo0ow88op2","tag_id":"ckdcfltoj0002pndo753kegc7","_id":"ckdcfltom0005pndoccbrae4w"},{"post_id":"ckdcfla7p0000pndo0ow88op2","tag_id":"ckdcfltok0003pndo1c9l3g3r","_id":"ckdcfltom0006pndo9agx8lsw"},{"post_id":"ckdcgs80t0000zldo2nev1gdz","tag_id":"ckdcgsrsv0001zldo00p47sr7","_id":"ckdcgsrsy0006zldoghrlgimx"},{"post_id":"ckdcgs80t0000zldo2nev1gdz","tag_id":"ckdcgsrsw0003zldo4q8scwm2","_id":"ckdcgsrsy0007zldoa50d1xlw"},{"post_id":"ckdcgs80t0000zldo2nev1gdz","tag_id":"ckdcgsrsx0004zldoduwresh3","_id":"ckdcgsrsy0008zldo88j7h0vz"},{"post_id":"ckdcgs80t0000zldo2nev1gdz","tag_id":"ckdcgswcf000azldofa6h21x3","_id":"ckdcgswcg000czldo3hbf1ga0"},{"post_id":"ckdcgs80t0000zldo2nev1gdz","tag_id":"ckdcgswcg000bzldo5xqw2a17","_id":"ckdcgswch000dzldodzis1mk0"},{"post_id":"ckdcgs80t0000zldo2nev1gdz","tag_id":"ckdcgte32000ezldo9tpd01g1","_id":"ckdcgte33000fzldoewjf812b"},{"post_id":"ckdcokkvy0000b2do231w7zd4","tag_id":"ckdcol5x20001b2doacfyc7qe","_id":"ckdcol5x50006b2do3rh7fx31"},{"post_id":"ckdcokkvy0000b2do231w7zd4","tag_id":"ckdcol5x30003b2do1f9db6dv","_id":"ckdcol5x50007b2dobav01z9i"},{"post_id":"ckdcokkvy0000b2do231w7zd4","tag_id":"ckdcol5x40004b2do7zolf7hg","_id":"ckdcol5x50008b2do2lkwgout"},{"post_id":"ckdcokkvy0000b2do231w7zd4","tag_id":"ckdcol5x40005b2dohzue8glh","_id":"ckdcol5x50009b2doe0hv6k1a"},{"post_id":"ckdcokkvy0000b2do231w7zd4","tag_id":"ckdcoldpa000ab2dofy0m5ct4","_id":"ckdcoldpb000cb2do8wc57gnx"},{"post_id":"ckdcokkvy0000b2do231w7zd4","tag_id":"ckdcoldpb000bb2doc0np81gg","_id":"ckdcoldpb000db2dob05rdkdp"},{"post_id":"ckdd2hi160000gddodx7hgv5v","tag_id":"ckdd2jq2x0000m0do1gsr7s21","_id":"ckdd2jq2z0002m0do9mh628ns"},{"post_id":"ckdd2hi160000gddodx7hgv5v","tag_id":"ckdd2jq2y0001m0do9gu617xq","_id":"ckdd2jq2z0003m0do6jiy8m5f"},{"post_id":"ckdd2hi160000gddodx7hgv5v","tag_id":"ckdcfltoj0002pndo753kegc7","_id":"ckdd2jq2z0004m0do7sqv3r7o"},{"post_id":"ckdd2hi160000gddodx7hgv5v","tag_id":"ckdd2juwi0005m0do9oeagnnf","_id":"ckdd2juwj0006m0doey8ohxrn"}],"Tag":[{"name":"tech","_id":"ckdccvpzu0000t6doddz24dk0"},{"name":"php","_id":"ckdccz2hx00009zdo8wmw9vb7"},{"name":"foreach","_id":"ckdccz45400029zdo5xciej50"},{"name":"引用","_id":"ckdccz71x00049zdo7imhckmd"},{"name":"mysql","_id":"ckdcfltoj0002pndo753kegc7"},{"name":"碎片","_id":"ckdcfltok0003pndo1c9l3g3r"},{"name":"性能分析","_id":"ckdcgsrsv0001zldo00p47sr7"},{"name":"vmstat","_id":"ckdcgsrsw0003zldo4q8scwm2"},{"name":"iotop","_id":"ckdcgsrsx0004zldoduwresh3"},{"name":"nethogs","_id":"ckdcgsrsx0005zldobkbh3dpj"},{"name":"top","_id":"ckdcgswcf000azldofa6h21x3"},{"name":"free","_id":"ckdcgswcg000bzldo5xqw2a17"},{"name":"strace","_id":"ckdcgte32000ezldo9tpd01g1"},{"name":"WEB","_id":"ckdcol5x20001b2doacfyc7qe"},{"name":"SQL注入","_id":"ckdcol5x30003b2do1f9db6dv"},{"name":"XSS","_id":"ckdcol5x40004b2do7zolf7hg"},{"name":"CSRF","_id":"ckdcol5x40005b2dohzue8glh"},{"name":"XEE","_id":"ckdcoldpa000ab2dofy0m5ct4"},{"name":"LFI","_id":"ckdcoldpb000bb2doc0np81gg"},{"name":"canal","_id":"ckdd2jq2x0000m0do1gsr7s21"},{"name":"binlog","_id":"ckdd2jq2y0001m0do9gu617xq"},{"name":"同步中间件","_id":"ckdd2juwi0005m0do9oeagnnf"}]}}